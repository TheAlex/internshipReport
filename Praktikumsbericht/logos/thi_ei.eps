%!PS-Adobe-3.0 %%Creator: Adobe Illustrator(R) 8.0%%AI8_CreatorVersion: 15.1.0%%For: (dyset) ()%%Title: (thi_FEI_logo_wbh_RGB.eps)%%CreationDate: 04.07.13 10:28%%Canvassize: 16383%%BoundingBox: 216 -352 584 -249%%HiResBoundingBox: 216.9082 -351.8594 583.6289 -249.1543%%DocumentProcessColors: Cyan Magenta Yellow Black%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0%%+ procset AGM_Gradient 1.0 0%%+ procset Adobe_ColorImage_AI6 1.3 0%%+ procset Adobe_Illustrator_AI5 1.3 0%%+ procset Adobe_pattern_AI5 1.0 0%%+ procset Adobe_cshow 2.0 8%%+ procset Adobe_shading_AI8 1.0 0%AI5_FileFormat 4.0%AI3_ColorUsage: Color%AI7_ImageSettings: 0%%RGBProcessColor: 0 0.352941 0.607843 (C=100 M=50 Y=0 K=20)%%+ 0 0 0 ([Passermarken])%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) %%+ Options: 1 16 0 1 1 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 2 3 4%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 -1 -1 () %AI3_TemplateBox: 400.5 -300.5 400.5 -300.5%AI3_TileBox: -3 -579.5 780 -20.5%AI3_DocumentPreview: None%AI5_ArtSize: 800 600%AI5_RulerUnits: 6%AI5_ArtFlags: 0 0 0 1 0 0 1 0 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI8_OpenToView: -178 16 1.26 1460 785 18 0 0 171 157 0 0%AI5_OpenViewLayers: 7%%PageOrigin:0 -600%AI7_GridSettings: 8.50394 1 8.50394 1 1 0 0.8 0.8 0.8 0.9 0.9 0.9%AI9_Flatten: 1%AI12_CMSettings: 00.MS%AI7_Thumbnail: 128 36 8%%BeginData: 5864 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD72FFAF0D5AFD7DFF2F0706A9FD7CFF2F0D2FA9FD07FFA885FFFD%0484A8FD09FFA8FD0AFFA8A8FD0AFFAFA8FD0AFFA884FFA884A8FD0AFFAF%7EFD0EFFA984FD09FFA8A8FD13FFA8060D2FFD07FFA80D0635A95A5A84FD%0AFF8584FD09FF84AFFD0AFF7E85FD0AFF2F5AFFA907FD0BFF8436FD0EFF%5A5AFD09FF5A2FFD13FF5A0D0785FD07FFA9070D07FF845AFFFF8459AFFF%FF847E84FF7E5A7E84FFFF84845AFFFFA9A8FF7E7E84FFFFA859A9FF8459%847EFFFFFF5A7EA8FFFF5A59FF840DA9FF847EA8FFFFA95AA9FFA80D847E%FFFFFF7E84A8FFFF845AAFFF5A2F8484FFFF84AFFF7EFF5A5AFFFF847EA8%FD09FFA8847E84842F060D5A847E847E847EFFFF5A0784FF8484FF845AA9%2FFF845A845A84A92FA95A84FF2F7E8435FF5AAF5A84845AA8A935A92FA9%842F847E5AFF3584845AFFFF5A5AA8840DFF5A2F2F2FA9AF0D5A0785A90D%2F3035FF2F362F2FFF840D3607FF7E0D2F2F7EFF0DFFFF0DA98435FF5A2F%352FA8FD07FF840D070D07FD050D070D070D070D0D84FD04FF845AFF2FAF%FF5A7E5AA8FFA8A97E84FFFF35AF2FFFFF5A845AA85A59FFA8FF59A9FFAF%A8845AFFA85AA85AA8FF2FA9FF5A072F0D2FA82F7EFF0D845936FF845AA9%0DFFA82FA82F2FAF5AFF2F84FF5A84842FFF5A36A92FA8FF0DFF595AFF2F%59A90784FD07FF5A060D0607060D070D060D0607060D060D0684FFFFFF84%84FF5A5A845AFF5AAFFFFFFF847EFFAF5AA95AFFFF5AAF5AAFFF84355AFF%84A8FFFFFF7E84FFFF5AAF2F845A84AFFF355AFFA90DFF2FAFFF5A84845A%FFFFFF8436FFFF0DFFA85A0D5AFF5A84FFFFFF5A5AFF852FFF0DFFFF2FAF%845AFF2F362F3684FD07FFA9845A847E360D0D35857E845A847E5A0D0D0D%FFFFFF845AFF2FFFFFA9A85A84FFA8A97E84FFFF59AF2FFFFF5AA87E84A8%FFFF358459A9FFA984845AFFA85AA85AFFFF84FFFF5A5AFF842FA92F7EFF%0D845A36FF847EA90DFFA82FA85AA8AF07A82F7EFF5AA8842FFF5A36AF0D%A8FF0DFF5936FF2F7EFF59A9FD0CFF2F0D07AFFD07FF36060DA8FFFF7E84%FF8459842FFF845A843684857EFFA95AAF5AFFFF5AAF5AAF5A5A7E5AA9A9%2F852FA97E84FFFF35FF5A845A5AFFFF3584FFA90DFF7E0D0D36FFAF0D36%0D858436FFFF0DFF5A0D2F36FFA90D360DFF5A5AFF842FFF5A2F2F0DFFA9%07A9842F0D2FAFFD0BFFA90D0736FD08FF5A0D07AFFFFFFFA8FFFF845AFF%FFFF8484A8FFA8FFFFFFA8FFA8FFFFAFA9AFA8FF8484A8FFFFA959A9FFAF%A8FFAFA9FFFF7E84A8FFFF8484FFA8A8FFFF8484A8FFFFAF5AA9FFFF84FF%A8A8FFFF8484A8FFA9845AFFFFAFA8FFA8A9FFFF5A8484AFFFA9A8FF8484%A8FD0CFF84060759FD07FFA82F060DA8FD32FF5984FD11FF2FA9FD06FF84%5AFD0AFF5AA8FF2FA9FD12FF5A0D07A9FD07FFAF0D0D35FD33FF5A59FFA8%AF84FFFFFFA8AFA8FFFFFF84AFFFFF0DA9FFFF84AFFFFF2F35A8FFFFA8A8%FFFFFFA8AF2FA8A82F5AFD12FFA9072FA8FD07FF590D0684FD33FF3584A8%0D2F0D5AFF840D0D0D84FF2F2F0DA9FF2FA9FF2F360DA97E0D0D5AFF5A0D%2F7EFF5A0D0D2F845A070D84FD1CFF36070DA8FD33FF5A5AA907FF840DA8%2F5AFF0D847E2FFF7E2FFF0DFF7E0DA8847EFF595AFFAF35FF5A2FA80D84%FF07A9FF2F7EFD1DFF070D0DFD34FF3584A836FFFF0DFF2FAFFF5A848435%FFA836A936A9FF5A3035AFFF845AFFAF5A0D2F35FF0DFFFF3684FF2FAFFD%1CFF840D075AFD34FF5A5AA90DFFA82FA82F84FF2FA95A35FF842FFF0DFF%A884AF5A2FFF595AFF8407FF5A35A82FA8FF0DA9FF2F84FD1CFF5A060D7E%FD34FF2F84A82FFFAF0DFF5A2F350D84FF0D5A0D84FF2F2FAF0D5A0D5AFF%840684A82F5A2F2FFF2F362F0D84FF2F0DA8FD1BFF590D0DFD35FF8484FF%7EFFA884FFFF5A840D84FFA95984FFFFA884FFA9597EA8FFAF845AFF845A%5A84FFFF59845AAFFFAF59A9FD1BFFAF59A9FD3DFF5A5A842F84FD7BFFAF%2F355AFDFCFFFDF8FF84595AA8FFFFFF5AFD05FFA984A8A9FF847EAFA8A9%FFFFFD04845AFD04FF8459847EA9FFFFFFA97EFFFFAFA8FD06FFA9A8FD07%FF7EFD06FF847EA9FD37FF59AFFFFF84A9A95AFFA9A9FFA9AF5A842FFF84%84AF5A35FFAF365AAFAFAFA985A8FF5AA9FF8584FF7EAFA884FFA95A5AFD%04A97EFF5A5AAFA984FFA884FF5A5AA9FFA97EFF84847EFF84FD35FF5A2F%84845A2F84595A8484A8845A847E5AA85A2F84595AFFFF2FA959FF5A7E2F%AFFF5A2F847E845A5A2F845A5A847E5A842F84595A5A7E5A842FFD045A84%595A59842F5A597E5A5A59A9FD35FF5AAFFFA95A5A84302FFF7EFF848484%AF84FF5A5A7EA984FFFF84FF84FF855A85FFFF5AA9FFA984845A84842F5A%FF84A9A8A9A8A9FF8484FF7E5A5A847EFFFF5AFFA95A85FF5A5A850D5AFD%36FF5AA8FF5A5A2F8459847E8459357E5A845A7E5A2F84845AFFFF59FF5A%5A2F845AFFFF5A5AA97E5A5A5A35845A7E84A959847EAF595A7EA95A8435%5A845A59845AFF5A5A7EFF2F5A5A845A84FD35FFA8FFFFFF84A9A8AFFF84%A8855AAFA8FF84FF5A84AFFF84FFFFAFFFFF7E85A8FFFFFF84845AA984FF%7EA9AFFFFFA9FFA9A8FFFFA97EFFAF85AF847EFFA87EA8AFFFAFA8FFFFA9%A8AFAFFF84FD3EFF5AA9FF8484FFA8FF8435A8FFA9FD09FFA8FFA85AFFA9%5AA9FD59FF7EFF84A9355A84AF5A5AA8FF8485355A845A35AF5A5AA85A84%84355A35A9845A7E842FAFFD0484AFFD57FF5AFF845A5AA85A59FF5AA9FF%845A5AA87E84847EA9A85A59FF5AA92FA95A84595AA87EA85A5A0D7EFD58%FF5AFF5A845AFF5A5AA984A8FF7E847EFF5AA9848584AF5A84FF84A95AA8%845A7E2FFF5AFF5A842F84FD58FFA82F367E84A884845A2FAFFF845A84AF%847EA9A85A2FA97EFF5AAF5AA97E842F5AA85A5A847EAF5AA9FD25FFFF%%EndData%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient_Sep 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient_Sep 5 dict dup begin put
/AGM_Gradient_Sep_private 100 dict def
/initialize{
	AGM_Gradient_Sep begin
	AGM_Gradient_Sep_private begin
	_compositeJob{
		initializeSinglePassSeps
	}{
		initializeMultiPassSeps
	}ifelse
	initializeSeps
	AGM_Gradient_private begin
		/_fillSD newSpotDict def
		/_rampSD newSpotDict def
		/_nCustomColorSD nd
 end
	AGM_Gradient_Sep_private 
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient_Sep
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop	
 end
}def
/terminate{
	currentdict AGM_Gradient_Sep eq{
	 end
	}if
}def
AGM_Gradient_Sep_private begin
/initializeSeps{
	/currentoverprint { _of } def
	_noImage not _level2PS not and{
		/linealFill{
			currentoverprint{
				0 0 1 1 rectfill
			}{
				mySave
				8 setImageParms
				_color{
					_nCustomColorSD begin
						cyan magenta yellow black
	
						_spotColor{
							spot1/tintImage spot1/tintValue get 1 exch sub makeByte8 put
							spot2/tintImage spot2/tintValue get 1 exch sub makeByte8 put
						}if
				 end
	
					4{
						makeByte8 4 1 roll
					}repeat
					true 4 _nCustomColorSD ncolorimage
				}{
					_nCustomColorSD/black get 1 exch sub makeByte8 
					_nCustomColorSD bwImage
				}ifelse
				myRestore
			}ifelse
		}def
	}if
	/_whiteBytes 1 makeByte8 pt
	 /knockOut{
		_noImage _level2PS or currentoverprint or{
			gsave
			false setoverprint
			1 setgray 
			0 0 1 1 rectfill
			grestore
		}{
			8 setImageParms _whiteBytes /_image load 5 execImage
		}ifelse
	}def
	/newSpotDict{
		11 dict dup begin
			/nSpots 2 def
			/spot1 7 dict def
			/spot2 7 dict def
	 end
	}def
	/initSpotData
	{
	 begin
			/name nd
			/tintImage nd
			/tintValue nd
			/spot_C nd
			/spot_M nd
			/spot_Y nd
			/spot_K nd
	 end
	}def
	/initSpotDict{
	 begin
			/cyanInk nd
			/magentaInk nd
			/yellowInk nd
			/blackInk nd
			/cyan nd
			/magenta nd
			/yellow nd
			/black nd
			spot1 initSpotData
			spot2 initSpotData
	 end
	}def
	/copySpotDict{
		/_dst xp
	 begin
			cyanInk magentaInk yellowInk blackInk
			cyan magenta yellow black
			spot1 spot2
	 end
		_dst begin
			/spot1 spot1 maxlength dict def
			/spot2 spot2 maxlength dict def
			spot2 copy pop
			spot1 copy pop
			/black xd
			/yellow xd
			/magenta xd
			/cyan xd
			/blackInk xd
			/yellowInk xd
			/magentaInk xd
			/cyanInk xd
	 end
	}def
	/setCustomColor
	{
		1 index /Black eq{
			6 1 roll 5 npop
			1 exch sub
			setgray
		}{
			6 1 roll _ccAry1 astore exch
			dup null eq{
				pop 0
			}if
			setcustomcolor
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		
		_colorStyle 0 eq{
			0 0 0
			4 -1 roll
			1 exch sub
			_spotColor{
				/_colorStyle 3 pt
				/Black
				1 index
				1 exch sub
			}if
		}if
		_colorStyle 2 eq{
			3 npop
		}if
		_rampSD _fillSD copySpotDict
		
		_colorStyle 4 eq{ 
			pop
			9 2 roll 3 npop 6 -2 roll
		} if
		
		_colorStyle 3 eq _colorStyle 4 eq or{ 	
				
			_fillSD begin
				/_spot1 spot1 pt
				/_spot2 spot2 pt
		 end
			
			exch dup _spot1/name get eq{
				_spot1 _spot2
			}{
				_spot2 _spot1
			}ifelse
		 begin
			 begin
					/name xd
					1 exch sub /tintValue xd
					4{
						tintValue mul 4 1 roll
					}repeat
					_spotColor not{
						/tintValue null def
					}if
			 end
				/tintValue 0 def
		 end
		}if
		_fillSD nsetcustomcolor
	}def
	/renderCMYK{
		spot1/name get null eq
		spot2/name get null eq and
		dup not{
			pop
			spot1 spotConverted
		}if
		dup not{
			pop
			spot2 spotConverted
		}if
	}def
	/currentInk{
		true
		_inRipSep{
			currentcolorspace 0 get
			dup /DeviceGray eq
			1 index /DeviceCMYK eq or{
				pop
				currentcmykcolor add add add 0 eq{
					pop false
				}if
			}{
				/Separation eq{
					currentcolor 0 eq{
						pop false
					}if
				}if
			}ifelse
		}{
			currentgray 1 eq{
				pop false
			}if
		}ifelse
	}def
	/currentInkN{
	
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		{
			currentInk
		}{
			gsave
			_spot1 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			_spot2 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			grestore
			
			or
		} ifelse
	}def
	/fill_ /fill load def
	/fillOvp{
		currentoverprint{
			_inRipSep{
				currentcolorspace 0 get
				dup /DeviceGray eq
				1 index /DeviceCMYK eq or{
					pop
					currentcmykcolor add add add 0 eq{
						newpath
					}if
				}{
					/Separation eq{
						currentcolor 0 eq{
							newpath
						}if
					}if
				}ifelse
			}{
				currentgray 1 eq{
					newpath
				}if
			}ifelse
		}if
		fill_
	}def
	/fill{
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		
		{
			fillOvp
		}{
			_spot1 begin
				gsave
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
				}{
					1 setgray
				}ifelse
				fillOvp 
				grestore
		 end
			_spot2 begin
				name null ne{
					gsave
					true setoverprint
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					fillOvp
					grestore
				}if
		 end
			newpath
		}ifelse
	}def
	/expandSpot{
		_spotColor{
			/_len xp
			_rampSD begin
				spot1 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
				spot2 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
		 end
		}{
			pop
		}ifelse
	}def
	/rampImage{
		currentoverprint{
			rectImage
		}{
			_enabledSmoothShade{
				fillRamp
			}{
				_color{
					_rampSD begin
						/cyanInk _cyanData 0 ne def
						/magentaInk _magentaData 0 ne def
						/yellowInk _yellowData 0 ne def
						/blackInk _blackData 0 ne def
				 end
					
					_nSamples setImageParms
					_nSamples expandSpot
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 _rampSD ncolorimage
				}{
					_rampSD begin
						/cyanInk false def
						/magentaInk false def
						/yellowInk false def
						/blackInk true def
				 end
					_nSamples setImageParms 
					_blackData _rampSD bwImage
				}ifelse
			}ifelse
		}ifelse
	}def
	/nsetcustomcolor where{
		pop
	}{
		/nsetcustomcolor
		{
			/_nCustomColorSD xp
			_nCustomColorSD begin
				4 copy
				/black xd
				/yellow xd
				/magenta xd
				/cyan xd
				4 copy
				0 ne /blackInk xd
				0 ne /yellowInk xd
				0 ne /magentaInk xd
				0 ne /cyanInk xd
		 end
			setcmykcolor
		}def
	}ifelse
	/nsetcustomcolorend where{
		pop
	}{
		/nsetcustomcolorend
		{
			/_nCustomColorSD null pt
		}def
	}ifelse
}def
/initializeSinglePassSeps{
	/_decodeNorm	[0 1] pt
	/_decodeInvert 	[1 0] pt
	/spotConverted
	{
	 begin
			name null eq{
				false
			}{
				tintValue null eq tintImage null eq and{
					true
				}{
					_inDistiller{
						false
					}{
						false
						currentpagedevice/SeparationColorNames get{name eq or}forall
						not
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/dictImage
	{
		20 dict dup begin
			/Dict xd
			/Decode xd
			/DataSource xd
			/ImageMatrix xd
			/BitsPerComponent xd
			/Height xd
			/Width xd
			/ImageType 1 def
			Dict
	 end
		/_image load 1 execImage
	}def
	/bwImage{
	 begin
			gsave
			currentoverprint{
				blackInk{
					[/Separation /Black /DeviceGray{}] setcolorspace
					_decodeInvert dictImage
				}{
					5 npop
				}ifelse
			}{
				/DeviceGray setcolorspace
				_decodeNorm dictImage
			}ifelse
			grestore
	 end
	}def
	/ncolorimage where{
		pop
	}{
		/ncolorimage{
		 begin
				renderCMYK{
					cyanInk 
					magentaInk and
					yellowInk and
					blackInk and
					not
					currentoverprint 
					and{	
						pop pop
						gsave
						cyanInk{
							8 copy
							[/Separation /Cyan /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}if
						magentaInk{
							8 copy
							[/Separation /Magenta /DeviceGray{}] setcolorspace
							4 -1 roll
							3 npop
							_decodeNorm dictImage
						}if
						yellowInk{
							8 copy
							[/Separation /Yellow /DeviceGray{}] setcolorspace
							4 -2 roll
							3 npop
							_decodeNorm dictImage
						}if
						blackInk{
							4 -3 roll
							[/Separation /Black /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}{
							8 npop
						}ifelse
						grestore
					}{
						/_colorimage load 10 execImage
					}ifelse
				}{
					6 npop
					gsave
					spot1 begin
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							4 copy
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							1 setgray fill
						}ifelse
				 end
					spot2 begin
						true setoverprint
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							4 npop
							1 setgray fill
						}ifelse
				 end
					grestore
				}ifelse
		 end
		}def
	}ifelse
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_renderCMYK not{
			_rampSD begin
				[/DeviceN 
					[
					spot1 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					spot2 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					]
					_inDistiller {
						/DeviceCMYK [
							spot1 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 1
								}{
									0 0 0 0 0
								}ifelse
						 end
							spot2 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 2
								}{
									0 0 0 0 0
								}ifelse
						 end
							5 1 roll 6 -2 roll add
							dup 1 eq {
								pop
								8 /index cvx 1 /exch cvx /sub cvx
								9 1 /roll cvx
							}{
								2 eq {
									8 /index cvx 1 /exch cvx /sub cvx
									10 1 /roll cvx
								}if
							}ifelse
							4 1 /roll cvx 5 -2 /roll cvx
							8 /index cvx /mul cvx /exch cvx 9 /index cvx /mul cvx /add cvx 7 1 /roll cvx
							3 1 /roll cvx 4 -2 /roll cvx
							7 /index cvx /mul cvx /exch cvx 8 /index cvx /mul cvx /add cvx 6 1 /roll cvx
							2 1 /roll cvx 3 -2 /roll cvx
							6 /index cvx /mul cvx /exch cvx 7 /index cvx /mul cvx /add cvx 5 1 /roll cvx
							5 /index cvx /mul cvx /exch cvx 6 /index cvx /mul cvx /add cvx 4 1 /roll cvx
							6 -2 /roll cvx /pop cvx /pop cvx
						] cvx bind
					}{
						/DeviceCMYK {}
					}ifelse
				] setcolorspace
		 end
			/_nColorSpace currentcolorspace pt
		}if
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C0_Space _nColorSpace pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C1_Space _nColorSpace pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/initializeMultiPassSeps{
	/invertXfer{
		[
		{
			1 exch sub
		}/exec load systemdict /currenttransfer get exec /exec load
		] cvx systemdict /settransfer get exec
	}def
	/ccThrough{
		gsave
		1 setCustomColor
		currentcmykcolor
		grestore
		add add add 0 ne
	}def
	/spotConverted
	{
	 begin
			_isCMYKSep not{
				false
			}{
				name null eq{
					false
				}{
					tintValue null eq tintImage null eq and{
						true
					}{
						spot_C spot_M spot_Y spot_K name ccThrough
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/spotChannel
	{
		_isCMYKSep{
			pop false
		}{
			/_spotDict xp
				_spotDict/name get null eq{
					false
				}{
					_spotDict/spot_C get
					_spotDict/spot_M get
					_spotDict/spot_Y get
					_spotDict/spot_K get
					_spotDict/name get
					ccThrough 
				}ifelse
		}ifelse
	}def
	/getChannelData
	{
		_isCMYKSep dup{
			pop renderCMYK
		}if
		{
			_blackPlate{
				4 1 roll 3 npop blackInk
			}{
				_yellowPlate{
					4 2 roll 3 npop yellowInk
				}{
					_magentaPlate{
						4 3 roll 3 npop magentaInk
					}{
						3 npop cyanInk
					}ifelse
				}ifelse
			}ifelse
			{
				true /nonZeroData
			}{
				true /zeroData
			}ifelse
		}{
			4 npop
			spot1/name get null ne 
			spot1 spotChannel and{
				spot1/tintImage get dup null ne{
					false /nonZeroData
				}{
					pop false /noData
				}ifelse
			}{
				spot2/name get null ne 
				spot2 spotChannel and{
					spot2/tintImage get dup null ne{
						false /nonZeroData
					}{
						pop false /noData
					}ifelse
				}{
					false /noData
				}ifelse
			}ifelse
		}ifelse
	}def
	/renderChannelData
	{
		/_tmp xp
		_tmp /nonZeroData ne currentoverprint and{
			pop
			_tmp /zeroData eq{pop}if
			4 npop
		}{
			_tmp /nonZeroData eq{
				{
					invertXfer
				}if
					systemdict/image
				get 5 execImage
			}{
				pop
				_tmp /zeroData eq{pop}if
				4 npop
				knockOut
			}ifelse
		}ifelse
	}def
	/bwImage{
	 begin
			gsave
			dup dup dup
			getChannelData
			exch pop false exch
			renderChannelData
			grestore
	 end
	}def
	/ncolorimage{
	 begin
			pop pop
			gsave
			spot2/name get null ne spot2 spotChannel and{
				true setoverprint
			}if
			getChannelData 
			renderChannelData
			grestore
	 end
	}def
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C0_Space /DeviceGray pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C1_Space /DeviceGray pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient 20 dict dup begin put
/AGM_Gradient_private 201 dict def
/initialize
{
	AGM_Gradient begin
	AGM_Gradient_private begin
	initializeVars
	
	/bd systemdict/mark get def
	/ed
		_level2PS 
		{
			(>>)
		}{
			(counttomark 2 idiv dup dict begin {def} repeat pop currentdict end)
		} ifelse
	cvx def
	
	_level2PS{
		initializeLev2
	}{
		initializeLev1
	}ifelse
	
	queryDevice
	
	initializeRectFill
	initializeShading
	initializeOps
	_producingSeps{
		AGM_Gradient_Sep/initialize get exec
	}{
		initializeComposite
	}ifelse
	_illustrator{
		/f{}def
		/F{}def
		/s{}def
		/S{}def
		/b{}def
		/B{}def
	}if
	/image where{
		/image get /_image xd
	}if
	/colorimage where{
		/colorimage get /_colorimage xd
	}if
	AGM_Gradient_private
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop
 end
}def
/initializeAI
{
	pop pop 
	AGM_Gradient/AGM_Gradient_private get /_illustrator true put
	AGM_Gradient/initialize get exec
		AGM_Gradient begin
}def
/unload{
	systemdict/languagelevel known{
		systemdict/languagelevel get 2 ge{
			userdict/AGM_Gradient_Sep 2 copy known{
				undef
			}{
				pop pop
			}ifelse
			userdict/AGM_Gradient 2 copy known{
				undef
			}{
				pop pop
			}ifelse
		}if
	}if
}def
/terminate{
	currentdict AGM_Gradient eq{
	 end
	}if
}def
 
AGM_Gradient_private begin
/initializeVars{
	/_d255 256 array def
	0 1 255{
		_d255 exch dup 255 div put
	}bind for
	/_d255- 256 array def
	0 1 255{
		_d255- exch 1 _d255 2 index get sub put
	}bind for
	/_sSave nd
	/_dUserSpace matrix defaultmatrix def
	/_bUMatrix matrix def
	/_imageMatrix matrix def
	/_saveMatrix matrix def
	/_xm matrix def
	/_ccAry1 5 array def
	/_bbox 4 array pt
	/_level2PS 
		systemdict/languagelevel known dup{
			pop systemdict/languagelevel get 2 ge
		}if
	def
	/_level3PS
		_level2PS systemdict/shfill known and
	def
	currentdict /_illustrator known not{
		/_illustrator false def
	}if
	
}def
/initializeOps
{
	AGM_Gradient begin
	currentdict/Bc known not{
		/Bc{
		
			_renderFlag 2 eq _enabledSmoothShade or{
				6 npop
			}{
				pushBSpace
				_rampIndex 0 eq{
					pop pop
					setCStop
				}if
				linealFill
				popBSpace
			}ifelse
		
		}def
	}if
	
	currentdict/Bg known not{
		/Bg{
			10 npop
			/_gradName xp
			/_renderFlag xp
			/_enabledSmoothShade false pt
		
			_renderFlag 2 ne{
		
				_illustrator{
					_of setoverprint
				}if
		
				/_enabledSmoothShade 
					_level3PS{
						_usingSmoothShade
						_producingSeps not
						currentoverprint not or and
						_noImage not and
					}{
						false
					}ifelse
				pt
				
				_illustrator _eo and _renderFlag 3 eq or{
					eoclip
				}{
					clip
				}ifelse
		
				_gradNames _gradName 2 copy known{
					get
					mark exch aload pop
					/_gradType xp
					1 sub dup /_rampIndex xp
					/_maxRampIndex xp
					mark exch aload pop
					0 0
				}if
				pop pop
				getRampData
			}{
				mark mark
			}ifelse
		}def
	}if
	
	currentdict/Bm known not{
		/Bm{
			_renderFlag 2 ne{
				_gradType 0 eq{
					linealRamp
				}{
					radialGrad
				}ifelse
			}{
				6 npop
			}ifelse
		}def
	}if
	
	currentdict/Bh known not{
		/Bh{
			2 npop
			/_yHi xp
			/_xHi xp
			/_radHilite _xHi 0 ne _yHi 0 ne or pt
		}def
	}if
	
	currentdict/Bn known not{
		/Bn{
			AGM_Gradient_private begin
				dict /_gradNames xp
		 end
		}def
	}if
	
	currentdict/Bd known not{
		/Bd{
			AGM_Gradient begin
			AGM_Gradient_private begin
				/_nColorsBd xp
				/_gradType xp
				/_gradName xp
		}def
	}if
	
	currentdict/BD known not{
		/BD{
				currentdict/_gradNames known not{
					/_gradNames 20 dict def
				}if
				] _nColorsBd _gradType
				]  _gradName exch /_gradNames xput
		 end
		 end
		}def
	}if
	
	currentdict/Bb known not{
		/Bb{
		
			AGM_Gradient/AGM_Gradient_private get /_illustrator get not{
				AGM_Gradient begin
			}if
			AGM_Gradient_private begin
			_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			}if
			mySave
		}def
	}if
	
	currentdict/BB known not{
		/BB{
		
			/_tmp xp
			cleartomark cleartomark
		
			_tmp dup
			_renderFlag
		
			myRestore
		
			_producingSeps{
			 end
			}if
		
			_illustrator dup
		 end
			not {
			 end
			}if
		
			{
				2 ne exch 0 gt and{
					2 eq{
						s
					}{
						S
					}ifelse
				}{
					pop newpath
				}ifelse
			}{
				pop newpath
			}ifelse
		
		
		}def
	}if
	
	currentdict/Xm known not{
		/Xm{
			_xm astore pop
		}def
	}if
	
 end
}def
/queryDevice{
	/_inDistiller
		systemdict /currentdistillerparams known
	def
	/_inRipSep
		_level2PS{
			currentpagedevice/Separations 2 copy known{
				get
			}{
				pop pop false
			}ifelse
		}{
			false
		}ifelse
		_inDistiller or
	def
	/_noImage /lv1Fix where{
		pop lv1Fix
	}{
		false
	}ifelse
	def
	/_useShells where{
		/_useShells get /_usingShells xp
	}{
		/_usingShells false def
	}ifelse
	
	/_useSmoothShade where{
		pop
	}{
		/_useSmoothShade false def 
	}ifelse
	/_forceToCMYK where{
		pop
	}{
		/_forceToCMYK false def 
	}ifelse
	/_cyanPlate 1 0 0 0 testCMYKColorThrough def
	/_magentaPlate 0 1 0 0 testCMYKColorThrough def
	/_yellowPlate 0 0 1 0 testCMYKColorThrough def
	/_blackPlate 0 0 0 1 testCMYKColorThrough def
	/_compositeJob
		_cyanPlate _magentaPlate and _yellowPlate and _blackPlate and
	def
	/_isCMYKSep
		_cyanPlate _magentaPlate or _yellowPlate or _blackPlate or
	def
	/_compositeSpotDevice where{
		pop
	}{
		/_compositeSpotDevice _compositeJob not _inRipSep or{
			1
		}{
			0
		}ifelse
		def
	}ifelse
	/_producingSeps _compositeSpotDevice 0 ne def
	/_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/_dpiThreshold where{
		pop
	}{
		/_dpiThreshold 600 def
	}ifelse
	/_screenFreqThreshold where{
		pop
	}{
		/_screenFreqThreshold 150 def
	}ifelse
	/_contoneDevice where{
		pop
	}{
		/_contoneDevice false def
	}ifelse
	/_subSampleOK 
		_deviceDPI _dpiThreshold le 
		currentScreenFreq _screenFreqThreshold le and 
		_contoneDevice not and 
	def
}def
/initializeRectFill{
	/rectfill where dup{
		exch pop not _producingSeps or
	}{
		not
	}ifelse
	{
		/rectfill{
			gsave
			newpath
			4 2 roll moveto
			1 index 0 rlineto
			0 1 index rlineto
			1 index neg 0 rlineto
			pop pop
			closepath
			fill
			grestore
		}def
	}if
}def
/initializeLev1{
	/currentScreenFreq{
		currentscreen pop pop
	}def
	/_byte 1 string def
	/colorimage where{
		pop
	}{
		/colorimage{
			pop pop
			/_blackTmp xp
			/_yellowTmp xp
			/_magentaTmp xp
			/_cyanTmp xp
			/_cnt 0 pt
			[
			_byte dup 0
			_cyanTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .3 /mul cvx
			_magentaTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .59 /mul cvx
			_yellowTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .11 /mul cvx
			_blackTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx
			/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/dup cvx 1 /gt cvx{
				pop 1
			}/if cvx
			255 /mul cvx /cvi cvx
			256 /mod cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/put cvx
			/_cnt dup cvx 1 /add cvx /pt cvx
			] cvx
			bind
			/_image load 5 execImage
		}def
	}ifelse
}def
/initializeLev2{
	/level2ScreenFreq{
	 begin
		60
		HalftoneType 1 eq{
			pop Frequency
		}if
		HalftoneType 2 eq{
			pop GrayFrequency
		}if
		HalftoneType 5 eq{
			pop Default level2ScreenFreq
		}if
		 end
	}def
	/currentScreenFreq{
		currenthalftone level2ScreenFreq
	}def
}def
/initializeShading{
	_useSmoothShade _level3PS and{
		/_usingSmoothShade true pt
		initializeLev3_Ops
	}{
		/_usingSmoothShade false pt
	}ifelse
}def
/initializeLev3_Ops
{
	/initShFill{
		/_index _gradType 0 eq {0}{_maxRampIndex 1 sub} ifelse pt
		/_rampFuncsArray _maxRampIndex array pt
		/_boundsArray _maxRampIndex 1 sub array pt
		/_encodeArray _maxRampIndex 2 mul array pt
		/_beginCoord _rampPoint pt
		/_colorSpace null pt
		/_firstFill _rampIndex _maxRampIndex eq pt
		/_lastFill false pt
	}def
	/linealShFill{
		popBSpace
		_xm aload pop pushBSpace
		
		/_size _index 1 add pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray 0 _size getinterval pt
			/_boundsArray _boundsArray 0 _size 1 sub getinterval pt
			/_encodeArray _encodeArray 0 _size 2 mul getinterval pt
		}if
		
		bd
			/ShadingType 2
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_firstFill _lastFill]
			/Domain [0 1] 
			/Coords [_beginCoord 0 _endCoord 0]
		ed
		shfill
	}def
	
	/radialShFill{
		/_size _maxRampIndex _index sub pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray _index _size getinterval pt
			/_boundsArray _boundsArray _index _size 1 sub getinterval pt
			/_encodeArray _encodeArray _index 2 mul _size 2 mul getinterval pt
		}if
		
		/_rampLen _beginCoord _endCoord sub pt
		bd
			/ShadingType 3
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_lastFill _firstFill]
			/Domain [0 1] 
			/Coords [_xHi _rampLen mul _yHi _rampLen mul _endCoord 0 0 _beginCoord] 
		ed
		shfill
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
	}def
	
	%
	/sampFunc{
		/_tmp exch pt
		bd
			_tmp length 1 eq {
				_tmp 0 get
				/_tmp 2 string pt
				dup _tmp 0 3 -1 roll put
				_tmp 1 3 -1 roll put
			}if
			/FunctionType 0
			/Order 1
			/Size [_tmp length]
			/Domain [0 1]
			/BitsPerSample 8
			/DataSource _tmp
			/Range [0 1]
		ed
	}def
	
	/fillRamp{
	
	
		/_invert _midPoint 0.5 lt pt
		_rampIndex _maxRampIndex eq {
			initShFill
		}if
		
		getRampColorSpace
		
		_colorSpace null eq{
			/_colorSpace _rampColorSpace pt
		}{
			_colorSpace _rampColorSpace ne _rgbInCMYK or{
				/_index _index 1 
				_gradType 0 eq{
					sub pt
					linealShFill
				}{
					add pt
					radialShFill
				}ifelse
				initShFill
				/_colorSpace _rampColorSpace pt
			} if
		}ifelse
		/_endCoord _endPoint pt	
		/_rgbInCMYK false pt
		_producingSeps _forceToCMYK or _rgbRamp and {
			_spotColor{
				_renderCMYK
			}{
				_isCMYKSep
			}ifelse
		}{
			false
		}ifelse
		{
			_compositeJob{
				/_rgbInCMYK true pt
				_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
				dup length string copy /_kData exch pt
				dup length string copy /_yData exch pt
				dup length string copy /_mData exch pt
				dup length string copy /_cData exch pt
			}{
				_rampFuncsArray _index
					_cyanPlate{_cyanData}if
						_magentaPlate{_magentaData}if
						_yellowPlate{_yellowData}if
						_blackPlate{_blackData}if
					_nSamples expandOne
					sampFunc
					dup begin /Decode [1 0] def end
				put
				/_invert false pt
			}ifelse
		}{
			_rampFuncsArray _index
				bd
					/FunctionType 2
					/Domain [0 1]
					/N 0.5 log _invert{1 _midPoint sub}{_midPoint}ifelse log div
					_gradType 0 eq{
						_invert{/C1}{/C0}ifelse _C0
						_invert{/C0}{/C1}ifelse _C1
					}{
						_invert{/C0}{/C1}ifelse _C1
						_invert{/C1}{/C0}ifelse _C0
					}ifelse
				ed
			put
		}ifelse
		
		_rampIndex 1 ne{
			_boundsArray _index _gradType 1 eq{1 sub}if _endCoord put
		} if
		
		0 1 _invert {exch}if
		_encodeArray _index 2 mul 1 add 3 -1 roll put
		_encodeArray _index 2 mul 3 -1 roll put
		_rampIndex 1 eq {
			/_lastFill true pt
			_gradType 0 eq{
				linealShFill
			}{
				radialShFill
			}ifelse
		}if
		/_index _index 1 
		_gradType 0 eq{
			add pt
		}{
			sub pt
		}ifelse
	}def
}def
/initializeComposite{
	/bwImage{
		pop /_image load 5 execImage 
	}def
	/rampImage{
		_enabledSmoothShade{
			fillRamp
		}{
			_color{
				_nSamples setImageParms
	
				
				_rgbRamp _forceToCMYK not and{
					_redData _greenData _blueData _nSamples 3 expandColor
					true 3 null ncolorimage
				}{
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 null ncolorimage
				}ifelse
			}{
				_nSamples setImageParms _blackData null bwImage
			}ifelse
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		_colorStyle 0 eq{
			1 exch sub
			0 0 0
			4 -1 roll
		}if
		
		_colorStyle 2 eq{
			_forceToCMYK{
				3 npop setcmykcolor
			}{
				setrgbcolor 4 npop
			}ifelse
		}if
		
		_colorStyle 3 eq{
			1 exch sub /_tmp xp
			pop
			4{
				_tmp mul 4 1 roll
			}repeat
		}if
		
		_colorStyle 4 eq{
			_forceToCMYK{
				6 npop setcmykcolor
			}{
				3 -1 roll pop pop
				1 exch sub /_tmp xp
				3{
					1 exch sub _tmp mul 1 exch sub 3 1 roll
				}repeat
				setrgbcolor 
				4 npop
			}ifelse
		}if
		_colorStyle 2 ne _colorStyle 4 ne and{
			null nsetcustomcolor
		}if
	}def
	/nsetcustomcolor
	{
		pop setcmykcolor
	}def
	/nsetcustomcolorend
	{
	}def
	/ncolorimage{
		pop 
		/_colorimage load 10 execImage
	}def
	_noImage not _level2PS not and{
		/linealFill{
			8 setImageParms
			_color{
				currentcmykcolor
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 null ncolorimage
			}{
				currentgray makeByte8 null bwImage
			}ifelse
		}def
	}if
	/getRampColorSpace{
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		/_C0 [currentcolor] pt
		/_C0_Space currentcolorspace pt
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		/_C1 [currentcolor] pt
		/_C1_Space currentcolorspace pt
		
		/_rampColorSpace _C0_Space pt
		
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/npop{
	{pop}repeat
}def
/xd{
	exch def
}def
/nd{
	null def
}def
/pt{
	AGM_Gradient_private 3 1 roll put
}def
/xp{
	exch pt
}def
/xput{
	dup load dup length exch maxlength eq{
		dup dup load dup
		length 2 mul dict copy def
	}if
	load begin
		def
  end
}def
/mySave{
	save /_sSave xp
}def
/myRestore{
	_sSave type /savetype eq{
		_sSave restore
	}if
}def
/gMark{
	counttomark 2 add -1 roll
}def
/execImage{
	/_tmp xp
	{
		exec
	}stopped{
		$error /errorname get /undefinedresult ne{
			stop
		}{
			_tmp npop
		}ifelse
	}if
}def
/pushBSpace{
	newpath gsave
	_bUMatrix astore concat 
}def
/popBSpace{
	grestore
}def
/makeByte8{
	/_tmp 0 pt
	255 mul cvi
	8 string 8{
		dup _tmp 3 index put 
		/_tmp _tmp 1 add pt
	}repeat
	exch pop
}def
/setImageParms{
	1 8 2 index 0 0 1 0 0 _imageMatrix astore
}def
/linealFill{
	0 0 1 1 rectfill
}def
/testCMYKColorThrough{
	gsave
	setcmykcolor currentcmykcolor
	grestore
	add add add 0 ne
}def
/expandOne	{
	/_tmp xp
	dup type /stringtype ne{
		_tmp string
		exch
		dup 0 ne{
			255 mul cvi
			0 1 _tmp 1 sub{
				3 copy
				exch put pop
			}for
		}if
		pop
	}if
}def
/expandColor{
	/_channels xp
	/_len xp
	_channels{
		_len expandOne _channels 1 roll
	}repeat
}def
/blendColor{
	
	_color{
		_rgbRamp _producingSeps not and _forceToCMYK not and{
			_redData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_greenData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blueData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			/setrgbcolor cvx
		}{
			_cyanData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_magentaData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_yellowData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blackData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
	
			_spotColor{
				_rampSD begin
					/_rampSD cvx /begin cvx
	
					spot1 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
	
					spot2 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/_rampSD cvx
				/nsetcustomcolor cvx
			}{
				/setcmykcolor cvx
			}ifelse
		}ifelse
	}{
		_blackData dup type /stringtype eq{
			/_ndx cvx /get cvx _d255 /exch cvx /get cvx
		}if
		
		_enabledSmoothShade{
			1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx /setcmykcolor cvx
		}{
			 /setgray cvx
		}ifelse
	}ifelse
}def
/useRectImage{
	_subSampleOK _enabledSmoothShade not and{
		{
			mark
			0 1 dtransform atan cvi 90 mod 0 eq
			1 0 dtransform atan cvi 90 mod 0 eq
		} stopped
		{
			cleartomark
			false
		}
		{
			and exch pop
		} ifelse
	}{
		false
	}ifelse
}def
/linealImage{
	_noImage{
		rectImage
	}{
		_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get
				/rampImage get exec
		}{
			useRectImage{
				rectImage
			}{
				rampImage
			}ifelse
		}ifelse
	}ifelse
}def
/linealRamp{
	pushBSpace
	_ramp{
		linealImage
	}{
		linealFill
	}ifelse
	popBSpace
	/_rampIndex _rampIndex 1 sub pt
	_rampIndex 0 gt{
		getRampData
	}if
}def
/radialGrad{
	/_usingShells currentoverprint _producingSeps and _usingShells or pt
	/_firstShell true pt
	_enabledSmoothShade not{
		currentoverprint _producingSeps and{
			
			newpath
			clippath pathbbox 
			1 add 4 1 roll
			1 add 4 1 roll
			1 sub 4 1 roll
			1 sub 4 1 roll
			_bbox astore pop
			
			newpath
			_bbox 0 get _bbox 1 get moveto
			_bbox 2 get _bbox 1 get lineto
			_bbox 2 get _bbox 3 get lineto
			_bbox 0 get _bbox 3 get lineto
			closepath
			6 copy
			gsave _bUMatrix astore concat
			1 0 moveto 0 0 1 0 360 arc closepath
			eoclip fill
			popBSpace
		}{
			fill
		}ifelse
	}if
	pushBSpace
	
	_radHilite{
		_xHi _yHi _bUMatrix idtransform /_yHi xp /_xHi xp
		_rampPoint 1 lt{
			1 _rampPoint sub dup _xHi mul exch _yHi mul translate
		}if
	}if
	_rampIndex{
		radialRamp
		/_rampIndex _rampIndex 1 sub pt
		_rampIndex 0 gt{
			getRampData
		}if
	}repeat
	
	popBSpace
	
}def
/getNSamples{
	0 exch
	{
		dup type /stringtype eq{
			length exch pop exit
		}if
		pop
	}forall
	dup 0 eq{
		pop 1
	}if
}def
/getRampData{
	/_rampType gMark pt
	/_color _rampType 0 gt pt
	/_ccRGB _rampType 5 eq _rampType 6 eq or pt
	/_rgbRamp _rampType 4 eq _ccRGB or pt
	/_ccProcess _rampType 2 eq _rampType 3 eq or pt
	_producingSeps{
		_rampSD initSpotDict
		/_spotColor _ccProcess _ccRGB or pt
	}{
		/_spotColor false pt
	}ifelse
	/_ramp true pt
	100 div /_rampPoint xp
	100 div /_midPoint xp
	
	dup /_colorStyle xp
	_colorStyle 0 eq{ 
		2
	}{
		_colorStyle 1 eq{ 
			5
		}{
			_colorStyle 2 eq{
				8
			}{
				_colorStyle 3 eq{
					_producingSeps{
						_rampSD /spot1 get begin
							/name 3 index def
							/spot_K 4 index def
							/spot_Y 5 index def
							/spot_M 6 index def
							/spot_C 7 index def
					 end
					}if
					7
				}{
					_producingSeps{
						_rampSD/spot1 get begin
							/name 4 index def
							/spot_K 8 index def
							/spot_Y 9 index def
							/spot_M 10 index def
							/spot_C 11 index def
					 end
					}if
					11
				} ifelse
			}ifelse
		}ifelse
	}ifelse
	/_tmp xp
	_tmp index 100 div /_endPoint xp
	
	_gradType 1 eq{
		_tmp 1 add index 100 div /_midPoint xp
	}if
	
	_producingSeps{
		_tmp 2 add index /_nextColorStyle xp
		_nextColorStyle 3 eq{
			/_tmp _tmp 4 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 2 add index def
					/spot_Y _tmp 3 add index def
					/spot_M _tmp 4 add index def
					/spot_C _tmp 5 add index def
			 end
			}{
				pop
			}ifelse
		}if
		_nextColorStyle 4 eq{
			/_tmp _tmp 5 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 5 add index def
					/spot_Y _tmp 6 add index def
					/spot_M _tmp 7 add index def
					/spot_C _tmp 8 add index def
			 end
			}{
				pop
			}ifelse
		}if
	}if
	_rampType 3 eq _rampType 6 eq or{
		/_tint2Data gMark pt
	}if
	_ccProcess _ccRGB or{
		/_tint1Data gMark pt
	}if
	_rgbRamp{
		/_blueData gMark pt
		/_greenData gMark pt
		/_redData gMark pt
	}if
	
	_producingSeps{
		_ccProcess _ccRGB or{
			_rampType 3 eq _rampType 6 eq or{
				_rampSD /spot2 get begin
					/tintImage _gradType 0 eq{
						_tint2Data
					}{
						_tint1Data
					}ifelse
					def
					name null eq{
						/name /Black def
					}if
			 end
			}if
			_rampSD /spot1 get begin
				/tintImage _gradType 0 eq _rampType 2 eq or _rampType 5 eq or{
					_tint1Data
				}{
					_tint2Data
				}ifelse
				def
				_rampType 2 eq _rampType 5 eq or{
					name null eq{
						/name _rampSD/spot2 get /name get def
						/spot_C _rampSD/spot2 get /spot_C get def
						/spot_M _rampSD/spot2 get /spot_M get def
						/spot_Y _rampSD/spot2 get /spot_Y get def
						/spot_K _rampSD/spot2 get /spot_K get def
						_rampSD/spot2 get /name null put
					}if
				}{
					name null eq{
						/name /Black def
					}if
				}ifelse
		 end
		}if
	}if
	/_blackData gMark pt
	_rampType 0 gt{
		counttomark 4 add -3 roll
		/_yellowData xp
		/_magentaData xp
		/_cyanData xp
	}if
	_ramp{
		/_nSamples
			[
			_rampType 0 eq {_blackData}if
			_rampType 1 eq {_cyanData _magentaData _yellowData _blackData}if
			_rampType 2 eq {_cyanData _magentaData _yellowData _blackData _tint1Data}if
			_rampType 3 eq {_cyanData _magentaData _yellowData _blackData _tint1Data _tint2Data}if
			_rampType 4 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData}if
			_rampType 5 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data}if
			_rampType 6 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data _tint2Data}if
			] getNSamples pt
		_enabledSmoothShade not {/_ramp _nSamples 1 gt pt} if
	} if
	
	setCStop
}def
/rectImage{
	gsave
	/_sInc 1 pt
	/_bInc 1 _nSamples div pt
	/_nSubSamples _nSamples pt
	/_optimize false pt
		
	_subSampleOK{
		/_uRampLen 1 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt pt
		/_pChange _uRampLen 0 eq{0}{_nSamples _uRampLen div}ifelse pt
		
		_pChange .5 gt dup /_optimize xp{
			/_nSubSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc 1 _nSubSamples div pt
			/_sInc _nSamples 1 sub _nSubSamples 1 sub div pt
		}if
	}if
	0
	_nSubSamples
	[
	/dup cvx
	_optimize {
		/round cvx /cvi cvx
	} if
	/_ndx /exch cvx /pt cvx
	blendColor
	0 0 _bInc 1 /rectfill cvx
	_bInc 0 /translate cvx
	_sInc /add cvx
	] cvx
	bind
	repeat
	pop
	_spotColor{
		nsetcustomcolorend
	}if
	grestore
}def
/radialInit{
	/_nRadSamples _nSamples dup 0 eq{pop 1}if pt
	/_sInc -1 pt
	/_rampLen _rampPoint _endPoint sub pt
	/_bInc _rampLen _nSamples div neg pt
	/_optimize false pt
	_subSampleOK{
		/_uRampLen
			_rampLen 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			0 _rampLen dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			2 copy lt{
				exch
			}if pop
		pt
		/_pChange 
			_uRampLen 0 eq{
				0
			}{
				_nSamples _uRampLen div
			}ifelse
		pt
		_pChange .5 gt dup /_optimize xp{
			/_nRadSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc _rampLen _nRadSamples div neg pt
			/_sInc _nSamples 1 sub _nRadSamples 1 sub div neg pt
		}if
	}if
	_radHilite{
		/_xBCInc _xHi _rampLen mul _nRadSamples div pt
		/_yBCInc _yHi _rampLen mul _nRadSamples div pt
	}if
}def
/radialRamp{
	_enabledSmoothShade{
		fillRamp
	}{
		/_saveMatrix _saveMatrix currentmatrix def
		
		radialInit
	
		%
		%
		true
		_producingSeps _rgbRamp not and{
			_nSamples 1 gt{ 
				pop
				/_ndx 0 pt
				[blendColor] cvx exec
				currentInkN
				/_ndx _nSamples 1 sub pt
				[blendColor] cvx exec
				currentInkN
				or
			}if
		}if
		{
			_rampPoint
		
			_nSamples 1 sub
		
			_nRadSamples 
			[
				/dup cvx
		
				_optimize{
					/round cvx /cvi cvx
				}if
		
				/_ndx /exch cvx /pt cvx
				
				_usingShells{
					/_firstShell cvx{
						/_firstShell false pt
					}{
						0 0 3 index 360 0 arcn fill
					}/ifelse cvx
				}if
		
				blendColor
		
				_usingShells{
					0 0 3 /index cvx 0 360 /arc cvx 
				}{
					0 0 3 /index cvx 0 360 /arc cvx /fill cvx
				}ifelse
		
				/exch cvx _bInc /add cvx /exch cvx
		
				_sInc /add cvx
		
				_radHilite{
					_xBCInc _yBCInc /translate cvx
				}if
			] cvx bind
			repeat
		
			pop pop
		}{
			_usingShells{
				0 0 _rampPoint 360 0 arcn fill
			}if
		}ifelse
	
		_saveMatrix setmatrix
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
		
		_usingShells _rampIndex 1 eq and{
			fill
		}if
	
		_spotColor{
			nsetcustomcolorend
		}if
	}ifelse
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 53 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 41 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIBuffer3 null def
	/XIDataProc null def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
	/XIPlateList false def
end
/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def
/ci6image systemdict /image get def
/ci6curtransfer systemdict /currenttransfer get def
/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def
/ci6foureq {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/ci6testplate {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 ci6foureq { 
				/plateindex 0 def
			}{
				0 1 0 0 ci6foureq { 
					/plateindex 1 def
				}{
					0 0 1 0 ci6foureq {
						/plateindex 2 def
					}{
						0 0 0 1 ci6foureq { 
							/plateindex 3 def
						}{
							0 0 0 0 ci6foureq {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/ci6concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/ci6istint {
	type /arraytype eq 
} def
/ci6isspot {
	dup type /arraytype eq {
		dup length 1 sub get /Separation eq
	}{
		pop false
	} ifelse
} def
/ci6spotname {
	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse
} def
/ci6altspace {
	aload pop pop pop ci6colormake
} def
/ci6numcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/ci6marksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				dup ci6isspot {
					/findcmykcustomcolor where {
						pop
						dup length 2 sub get
						0.1 0.1 0.1 0.1 5 -1 roll
						findcmykcustomcolor 1 setcustomcolor
						systemdict /currentgray get exec
						1 ne
					}{
						pop plateindex 5 ne
					} ifelse
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colormake {
	dup ci6numcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/ci6colorexpand {
	dup ci6spotname exch
	dup ci6istint {
		ci6altspace
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/ci6colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				ci6altspace ci6colortint ci6colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/ci6makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/ci6stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/ci6stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/ci6stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/ci6walkrgbstring {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/ci6walkcmykstring
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/ci6putrgbtograystr
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/ci6putcmyktograystr
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/ci6rgbtograyproc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putrgbtograystr load exch
		ci6walkrgbstring
 end
} def
/ci6cmyktograyproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putcmyktograystr load exch
		ci6walkcmykstring
 end
} def
/ci6separatecmykproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		
		XIBuffer3
		
		0 2 index
		
		plateindex 4 2 index length 1 sub {
			get 255 exch sub
			
			3 copy put pop 1 add
			
			2 index
		} for
		pop pop exch pop
 end
} def
	
/ci6compositeimage {
	dup 1 eq {
		pop pop image
	}{
		/ci6colorimage load null ne {
			ci6colorimage
		}{
			3 1 roll pop
			sourcearray 0 3 -1 roll put
			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load
			image
		} ifelse
	} ifelse
} def
/ci6knockoutimage {
	gsave
	0 ci6curtransfer exec 1 ci6curtransfer exec
	eq {
		0 ci6curtransfer exec 0.5 lt
	}{
		0 ci6curtransfer exec 1 ci6curtransfer exec gt
	} ifelse
	{{pop 0}}{{pop 1}} ifelse
	systemdict /settransfer get exec
	ci6compositeimage
	grestore
} def
/ci6drawimage {
	ci6testplate -1 eq {
		pop ci6compositeimage
	}{
		dup type /arraytype eq {
			dup length plateindex gt {plateindex get}{pop false} ifelse
		}{
			{
				true
			}{
				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse
			} ifelse
		} ifelse
		{
			dup 1 eq {
				pop pop ci6image
			}{
				dup 3 eq {
					ci6compositeimage
				}{
					pop pop
					sourcearray 0 3 -1 roll put
					/ci6separatecmykproc load
					ci6image
				} ifelse
			} ifelse
		}{
			ci6curoverprint {
				7 {pop} repeat
			}{
				ci6knockoutimage
			} ifelse
		} ifelse
	} ifelse
} def
/ci6proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace ci6numcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] ci6makeimagedict ci6image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] ci6makeimagedict ci6image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} ci6stringapply
			} ci6concatprocs ci6image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} ci6stringapply
			} ci6concatprocs false _pticomps
			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse
		} ifelse
	} ifelse
} def
/ci6graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray ci6proctintimage
} def
/ci6cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK ci6proctintimage
} def
/ci6rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB ci6proctintimage
} def
/ci6tintimage {
	ci6testplate -1 eq {
		ci6colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop ci6graytintimage
		}{
			dup /DeviceRGB eq {
				pop ci6rgbtintimage
			}{
				pop ci6cmyktintimage
			} ifelse
		} ifelse
	}{
		dup ci6marksplate {
			plateindex 5 lt {
				ci6colortocmyk plateindex get
				dup 0 eq ci6curoverprint and {
					7 {pop} repeat
				}{
					1 exch sub
					exch {1 0}{0 1} ifelse () ci6graytintimage
				} ifelse
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage
			} ifelse
		}{
			ci6curoverprint {
				8 {pop} repeat
			}{
				pop pop pop
				{pop 1} 0 1 () /DeviceGray ci6proctintimage
			} ifelse
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace ci6tintimage
} def
/XIImage {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	false XIChannelCount XIPlateList ci6drawimage
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		/_lp /null ddef
		_fc
		/_lp /imagemask ddef
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		ci6colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XIPlates {
	Adobe_ColorImage_AI6_Vars begin
		/XIPlateList exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEnable {
			/XIBuffer3 XIImageWidth string def
			XICompression 0 eq {
				/XIBuffer1 XIRowBytes string def
				XIEncoding 0 eq {
					{currentfile XIBuffer1 readhexstring pop}
				}{
					{currentfile XIBuffer1 readstring pop}
				} ifelse
			}{
				/XIBuffer1 256 string def
				/XIBuffer2 XIRowBytes string def
				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
				/ASCII85Decode filter /DCTDecode filter
				/XIFile exch def
				{XIFile XIBuffer2 readstring pop}
			} ifelse
			/XIDataProc exch def
			
			XIType 1 ne {
				0 setgray
			} if
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		/XIPlateList false def
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0
%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)
%%Version: 1.3 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 112 dict dup begin
put
/_?cmyk false def
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 100 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	/_aicmykps where {pop /_?cmyk _aicmykps def}if
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/_rgbtocmyk
{
	3
	{
		1 exch sub 3 1 roll
	} repeat
	3 copy 1 4 1 roll
	3
	{
		3 index 2 copy gt
		{
			exch
		} if
		pop 4 1 roll
	} repeat
	pop pop pop
	4 1 roll
	3
	{
		3 index sub
		3 1 roll
	} repeat
	4 -1 roll
} def
/setrgbfill
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/setrgbstroke
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_?cmyk {
		3 npop k
	}{
		setrgbfill 4 npop
	} ifelse
} def
/XA
{
	_?cmyk {
		3 npop K
	}{
		setrgbstroke 4 npop
	} ifelse
} def
/Xs
{
	/_gf exch ddef
	5 npop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setAIseparationgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XS
{
	/_gs exch ddef
	5 npop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setAIseparationgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/XK
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		K
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		XA
	} ifelse
} def
/Xk
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		k
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		Xa
	} ifelse
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/Xt {
	pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			endString eq {
				cleartomark stop
			} if
		}ifelse
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			dup beginString eq
			{
				pop /layerCnt dup load 1 add store
			}
			{
				endString eq
				{
					layerCnt 1 eq
					{
						cleartomark stop
					}
					{
						/layerCnt dup load 1 sub store
					} ifelse
				} if
			} ifelse
		}ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	6 npop
	7 2 roll
	5 npop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
/XP
{
	4 npop
} bind def
/XD
{
	pop
} bind def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Pattern Operators)
%%Version: 1.1 0
%%CreationDate: (03/26/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/@
{
} def
/&
{
} def
/dp
{
	dup null eq
	{
		pop
		_dp 0 ne
		{
			0 1 _dp 1 sub _dl mod
			{
				_da exch get 3 get
			} for
			_dp 1 sub _dl mod 1 add packedarray
			_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
			definepattern pop
		} if
	}
	{
		_dp 0 ne _dp _dl mod 0 eq and
		{
			null dp
		} if
		7 packedarray _da exch _dp _dl mod exch put
		_dp _dl mod _da 0 get 4 get 2 packedarray
		/_dp _dp 1 add def
	} ifelse
} def
/E
{
	_ed begin
	dup 0 get type /arraytype ne
	{
		0
		{
			dup 1 add index type /arraytype eq
			{
				1 add
			}
			{
				exit
			} ifelse
		} loop
		array astore
	} if
	/_dd exch def
	/_ury exch def
	/_urx exch def
	/_lly exch def
	/_llx exch def
	/_n exch def
	/_y 0 def
	/_dl 4 def
	/_dp 0 def
	/_da _dl array def
	0 1 _dd length 1 sub
	{
		/_d exch _dd exch get def
		0 2 _d length 2 sub
		{
			/_x exch def
			/_c false def
			/_r _d _x 1 add get cvlit def
			_r _ ne
			{
				_urx _llx sub _ury _lly sub
				[
				1 0 0 1 0 0
				]
				[
				/save cvx
				_llx neg _lly neg /translate cvx
				_c
				{
					nc /begin cvx
				} if
				_r dup type /stringtype eq
				{
					cvx
				}
				{
					{
						exec
					} /forall cvx
				} ifelse
				_c
				{
					/end cvx
				} if
				/restore cvx
				] cvx
				/_fn 12 _n length add string def
				_y _fn cvs pop
				/_y _y 1 add def
				_fn 12 _n putinterval
				_fn _c false dp
				_d exch _x 1 add exch put
			} if
		} for
	} for
	null dp
	_n _dd /_pd
 end
	xput
} def
/fc
{
	_fm dup concatmatrix pop
} def
/p
{
	/_fm exch ddef
	9 -2 roll _pm translate fc
	7 -2 roll _pm scale fc
	5 -1 roll _pm rotate fc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate fc
		1 -1 _pm scale fc
		neg _pm rotate fc
	}
	{
		pop
	} ifelse
	dup _pm rotate fc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore fc
	neg _pm rotate fc
	_pd exch get /_fdd exch ddef
	/_pf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					patternfill
				}
				{
					pop
					fill
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_psf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					9 copy 6 npop patternashow
				}
				{
					pop
					6 copy 3 npop hvashow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		sw rmoveto
	} ddef
	/_pjsf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					12 copy 6 npop patternawidthshow
				}
				{
					pop 9 copy 3 npop hvawidthshow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		swj rmoveto
	} ddef
	/_lp /none ddef
} def
/sc
{
	_sm dup concatmatrix pop
} def
/P
{
	/_sm exch ddef
	9 -2 roll _pm translate sc
	7 -2 roll _pm scale sc
	5 -1 roll _pm rotate sc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate sc
		1 -1 _pm scale sc
		neg _pm rotate sc
	}
	{
		pop
	} ifelse
	dup _pm rotate sc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore sc
	neg _pm rotate sc
	_pd exch get /_sdd exch ddef
	/_ps
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					patternstroke
				}
				{
					pop stroke
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_pss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					10 copy 6 npop patternashowstroke
				}
				{
					pop 7 copy 3 npop ss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop sw rmoveto
	} ddef
	/_pjss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					13 copy 6 npop patternawidthshowstroke
				}
				{
					pop 10 copy 3 npop jss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop swj rmoveto
	} ddef
	/_lp /none ddef
} def
end
userdict /Adobe_pattern_AI5 18 dict dup begin
put
/initialize
{
	/definepattern where
	{
		pop
		pop pop
	}
	{
	 begin
	 begin
		Adobe_pattern_AI5 begin
		Adobe_pattern_AI5
		{
			dup xcheck
			{
				bind
			} if
			pop pop
		} forall
		mark
		cachestatus 7 1 roll pop pop pop pop exch pop exch
		{
			{
				10000 add
				dup 2 index gt
				{
					exit
				} if
				dup setcachelimit
			} loop
		} stopped
		cleartomark
	 end 	
		
	 end
	 end
		
		Adobe_pattern_AI5 begin
	} ifelse
} def
/terminate
{
	currentdict Adobe_pattern_AI5 eq
	{
	 end
	} if
} def
errordict
/nocurrentpoint
{
	pop
	stop
} put
errordict
/invalidaccess
{
	pop
	stop
} put
/patternencoding
256 array def
0 1 255
{
	patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
	17 dict begin
	/uniform exch def
	/cache exch def
	/key exch def
	/procarray exch def
	/mtx exch matrix invertmatrix def
	/height exch def
	/width exch def
	/ctm matrix currentmatrix def
	/ptm matrix def
	/str 32 string def
	/slice 9 dict def
	slice /s 1 put
	slice /q 256 procarray length div sqrt floor cvi put
	slice /b 0 put
	/FontBBox
	[
	0 0 0 0
	] def
	/FontMatrix mtx matrix copy def
	/Encoding patternencoding def
	/FontType 3 def
	/BuildChar
	{
		exch
	 begin
		/setstrokeadjust where {pop true setstrokeadjust} if
		slice begin
		dup q dup mul mod s idiv /i exch def
		dup q dup mul mod s mod /j exch def
		q dup mul idiv procarray exch get
		/xl j width s div mul def
		/xg j 1 add width s div mul def
		/yl i height s div mul def
		/yg i 1 add height s div mul def
		uniform
		{
			1 1
		}
		{
			width 0 dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
			0 height dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
		} ifelse
		width 0 cache
		{
			xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
			setcachedevice
		}
		{
			setcharwidth
		} ifelse
		gsave
		scale
		newpath
		xl yl moveto
		xg yl lineto
		xg yg lineto
		xl yg lineto
		closepath
		clip
		newpath
	 end
	 end
		exec
		grestore
	} def
	key currentdict definefont
 end
} def
/patterncachesize
{
	gsave
	newpath
	0 0 moveto
	width 0 lineto
	width height lineto
	0 height lineto
	closepath
	patternmatrix setmatrix
	pathbbox
	exch ceiling 4 -1 roll floor sub 3 1 roll
	ceiling exch floor sub
	mul 1 add
	grestore
} def
/patterncachelimit
{
	cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
	exch dup begin
	setfont
	ctm setmatrix
	concat
	slice exch /b exch slice /q get dup mul mul put
	FontMatrix concat
	uniform
	{
		width 0 dtransform round width div exch round width div exch
		0 height dtransform round height div exch height div exch
		0 0 transform round exch round exch
		ptm astore setmatrix
	}
	{
		ptm currentmatrix pop
	} ifelse
	{
		currentpoint
	} stopped not
	{
		2 npop
		pathbbox
		true
		4 index 3 index eq
		4 index 3 index eq
		and
		{
			pop false
			{
				{
					2 npop
				}
				{
					3 npop true
				}
				{
					7 npop true
				}
				{
					pop true
				} pathforall
			} stopped
			{
				5 npop true
			} if
		} if
		{
			height div ceiling height mul 4 1 roll
			width div ceiling width mul 4 1 roll
			height div floor height mul 4 1 roll
			width div floor width mul 4 1 roll
			2 index sub height div ceiling cvi exch
			3 index sub width div ceiling cvi exch
			4 2 roll moveto
			FontMatrix mtx invertmatrix
			dup dup 4 get exch 5 get rmoveto
			ptm ptm concatmatrix pop
			slice /s
			patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
			dup slice /q get gt
			{
				pop slice /q get
			} if
			put
			0 1 slice /s get dup mul 1 sub
			{
				slice /b get add
				gsave
				0 1 str length 1 sub
				{
					str exch 2 index put
				} for
				pop
				dup
				{
					gsave
					ptm setmatrix
					1 index str length idiv
					{
						str show
					} repeat
					1 index str length mod str exch 0 exch getinterval show
					grestore
					0 height rmoveto
				} repeat
				grestore
			} for
			2 npop
		}
		{
			4 npop
		} ifelse
	} if
 end
} def
/patternclip
{
	_eo {eoclip} {clip} ifelse
} def
/patternstrokepath
{
	strokepath
} def
/patternmatrix
matrix def
/patternfill
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternclip
	Adobe_pattern_AI5 /patternpath get exec
	grestore
	newpath
} def
/patternstroke
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternstrokepath
	true
	{
		{
			{
				newpath
				moveto
			}
			{
				lineto
			}
			{
				curveto
			}
			{
				closepath
				3 copy
				Adobe_pattern_AI5 /patternfill get exec
			} pathforall
			3 npop
		} stopped
		{
			5 npop
			patternclip
			Adobe_pattern_AI5 /patternfill get exec
		} if
	}
	{
		patternclip
		Adobe_pattern_AI5 /patternfill get exec
	} ifelse
	grestore
	newpath
} def
/vpatternawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index 5 index 5 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			6 index 6 index 6 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	3 npop
} def
/hpatternawidthshow
{
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		9 index 9 index 9 index
		Adobe_pattern_AI5 /patternfill get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	8 npop
} def
/patternashow
{
0 0 0 6 3 roll
patternawidthshow
} def
/patternawidthshow
{
	6 index type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get 7 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshow } { vpatternawidthshow } ifelse
} def
/vpatternawidthshowstroke
{
	7 1 roll
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			3 index setmatrix
			6 index 6 index 6 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			4 index setmatrix
			7 index 7 index 7 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	4 npop
} def
/hpatternawidthshowstroke
{
	7 1 roll
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		7 index setmatrix
		10 index 10 index 10 index
		Adobe_pattern_AI5 /patternstroke get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	9 npop
} def
/patternashowstroke
{
	0 0 0 7 3 roll
	patternawidthshowstroke
} def
/patternawidthshowstroke
{
	7 index type /dicttype eq
	{
		patternmatrix /patternmatrix get 8 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshowstroke } { vpatternawidthshowstroke } ifelse
} def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_shading_AI8 1.0 0
%%Title: (Adobe Illustrator 8 Shading Procset)
%%Version: 1.0 0
%%CreationDate: (12/17/97) ()
%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_shading_AI8 10 dict dup begin put
/initialize {
	Adobe_shading_AI8 begin
	Adobe_shading_AI8 bdprocs
	Mesh /initialize get exec
} def
/terminate {
	currentdict Adobe_shading_AI8 eq {
	 end
	} if
} def
/bdprocs {
	{
		dup xcheck 1 index type /arraytype eq and {
			bind
		} if
		pop pop
	} forall
} def
/X! {pop} def
/X# {pop pop} def
/Mesh 40 dict def
Mesh begin
/initialize {
	Mesh bdprocs
	Mesh begin
		/emulate? /AI8MeshEmulation where {
			pop AI8MeshEmulation
		}{
			systemdict /shfill known not
		} ifelse def
 end
} def
/bd {
	shadingdict begin
} def
/paint {
	emulate? {
	 end
	}{
		/_lp /none ddef _fc /_lp /none ddef
		
		/AIColorSpace AIColorSpace tocolorspace store
		/ColorSpace AIColorSpace topsspace store
		
		version_ge_3010.106 not systemdict /setsmoothness known and {
			0.0001 setsmoothness
		} if
		
		composite? {
			/DataSource getdatasrc def
			Matrix concat
			currentdict end
			shfill
		}{
			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {
			 end
			}{
				/ColorSpace /DeviceGray store
				/Decode [0 1 0 1 0 1] store
				/DataSource getplatesrc def
				Matrix concat
				currentdict end
				shfill
			} ifelse
		} ifelse
	} ifelse
} def
/shadingdict 12 dict def
shadingdict begin
	/ShadingType 6 def
	/BitsPerCoordinate 16 def
	/BitsPerComponent 8 def
	/BitsPerFlag 8 def
end
/datafile null def
/databuf 256 string def
/dataptr 0 def
/srcspace null def
/srcchannels 0 def
/dstchannels 0 def
/dstplate 0 def
/srctodstcolor null def
/getplatesrc {
	/srcspace AIColorSpace store
	/srcchannels AIColorSpace getnchannels store
	/dstchannels 1 store
	/dstplate getplateindex store
	/srctodstcolor srcspace makesmarks {
		dstplate 4 eq {
			{1 exch sub}
		}{
			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}
		} ifelse
	}{
		{srcchannels {pop} repeat 1}
	} ifelse store
	/datafile getdatasrc store
	/rdpatch168 load DataLength () /SubFileDecode filter
} def
/getdatasrc {
	/rdcmntline load /ASCII85Decode filter
} def
/rdpatch168 {
	/dataptr 0 store
	49 rdcount
	4 {
		dup {pop srcchannels getint8} if
		dup {pop srctodstcolor dstchannels putint8 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdpatch3216 {
	/dataptr 0 store
	97 rdcount
	4 {
		dup {pop srcchannels getint16} if
		dup {pop srctodstcolor dstchannels putint16 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdcount {
	dup 0 gt {
		datafile databuf dataptr 4 -1 roll getinterval readstring
		exch length dataptr add /dataptr exch store
	}{
		true
	} ifelse
} def
/getint8 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 255 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint8 {
	dup dataptr add /dataptr exch store
	dataptr exch
	{
		1 sub exch
		255 mul cvi
		databuf 2 index
		3 -1 roll put
	} repeat
	pop
} def 
/getint16 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 256 mul datafile read} if
		dup {pop add 65535 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint16 {
	dup 2 mul dataptr add /dataptr exch store
	dataptr exch
	{
		2 sub exch
		65535 mul cvi dup
		256 idiv databuf 3 index 3 -1 roll put
		256 mod databuf 2 index 1 add 3 -1 roll put
	} repeat
	pop
} def 
/srcbuf 256 string def
/rdcmntline {
	currentfile srcbuf readline pop
	(%) anchorsearch {pop} if
} def
/getplateindex {
	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall
} def
/aicsarray 4 array def
/aicsaltvals 4 array def
/aicsaltcolr aicsaltvals def
/tocolorspace {
	dup type /arraytype eq {
		mark exch aload pop
		aicsarray 0 3 -1 roll put
		aicsarray 1 3 -1 roll put
		dup aicsarray 2 3 -1 roll put
		gettintxform aicsarray 3 3 -1 roll put
		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store
		aicsaltcolr astore pop pop
		aicsarray
	} if
} def
/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def
/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def
/gettintxform {
	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load
} def
/getnchannels {
	dup type /arraytype eq {0 get} if
	colorspacedict exch get begin Channels end
} def
/makesmarks {
	composite? {
		pop true
	}{
		dup dup type /arraytype eq {0 get} if
		colorspacedict exch get begin MarksPlate end
	} ifelse
} def
/markingplate {
	composite? {
		pop true
	}{
		dup type /arraytype eq {
			dup length getplateindex gt {getplateindex get}{pop false} ifelse
		} if
	} ifelse
} def
/tocmyk {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToCMYK end
} def
/topsspace {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToPSSpace end
} def
/colorspacedict 5 dict dup begin
	/DeviceGray 4 dict dup begin
		/Channels 1 def
		/MarksPlate {pop black?} def
		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def
		/ToPSSpace {} def
 end def
	/DeviceRGB 4 dict dup begin
		/Channels 3 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop _rgbtocmyk} def
		/ToPSSpace {} def
 end def
	/DeviceCMYK 4 dict dup begin
		/Channels 4 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop} def
		/ToPSSpace {} def
 end def
	/Separation 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			/findcmykcustomcolor where {
				pop dup 1 exch ToCMYK 5 -1 roll 1 get
				findcmykcustomcolor 1 setcustomcolor
				systemdict /currentgray get exec
				1 ne
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {} def
 end def
	/Process 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			isCMYKSep? {
				1 exch ToCMYK 4 array astore getplateindex get 0 ne 
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {
			4 array copy dup 0 /Separation put
		} def
 end def
end def
/isoverprint {
	/currentoverprint where {pop currentoverprint}{_of} ifelse
} def
/version_ge_3010.106 {
   version {cvr} stopped {
      pop
      false
   }{
      3010.106 ge
   } ifelse
} def
end
end
defaultpacking setpacking
%%EndResource
%%EndProlog%%BeginSetupuserdict /_useSmoothShade true putuserdict /_aicmykps false putuserdict /_forceToCMYK false putAdobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 AGM_Gradient /initializeAI get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_pattern_AI5 /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_shading_AI8 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_Begin_NonPrintingNp%AI8_PluginGroupInfo(Adobe Tracing Object) (Nachzeichnen) (TracingSuite.aip)%AI8_PluginGroupInfo(Adobe Flare Plugin) (Flare) (Flare.aip)%AI8_PluginGroupInfo(Adobe Deform Plugin) (Adobe H\237llen-Zusatzmodul) (Envelope and Warp.aip)%AI8_PluginGroupInfo(Adobe Planar Group) (Adobe-Zusatzmodul Interaktiv malen) (Live Paint.aip)%AI8_PluginGroupInfo(Adobe Perspective Plugin Group) (Adobe Perspective Plugin Group) (Perspective.aip)%AI8_PluginGroupInfo(Adobe Path Blends) (Adobe Angleichungen-Zusatzmodul) (LiveBlends.aip)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Adobe Spezialpinsel-Zusatzmodul) (ScatterBrushTool.aip)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Adobe Spezialpinsel-Zusatzmodul) (ScatterBrushTool.aip)%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Adobe Musterpinsel-Zusatzmodul) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Adobe Musterpinsel-Zusatzmodul) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Adobe Bildpinsel-Zusatzmodul) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Adobe Bildpinsel-Zusatzmodul) (ArtBrushTool.aip)%AI8_PluginGroupInfo(Adobe Calligraphic Brush Tool) (Adobe Kalligrafiepinsel-Zusatzmodul) (CalligBrushTool.aip)%AI8_PluginGroupInfo(Adobe Symbolism) (Adobe Symbolism) (ParticleSystem.aip)%AI8_PluginGroupInfo(Pathfinder Suite) (Adobe Zusammengesetzte Form) (PathFinderS.aip)%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp7 Bn%AI5_BeginGradient: (Neonring-Vignette)(Neonring-Vignette) 1 17 Bd[0.7599450.7859770.6917370.901060.074510.0470590.0549024 %_Br<C2C2C3C4C5C6CACBCCCED0D1D2D4D5D6D8DADCDDDFDFE0E1E2E2E2E3E3E3E5E6E6E6E7E7E7E7E8E8E8E8E9E9E9EAE9E9E9EAEAEAEAEAEAEAEBEAEAEAEAEAE9EAEAEAEAEAEAEAEAEAEAE9EAE9E9EAE9E9E9E9E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E7E7E7E7E6E7E6E6E5E6E5E5E5E5E4E4E4E4E3E3E3E2E2E2E1E1E0E0E0E0E0DFDFDFDFDEDEDEDEDDDDDDDCDCDBDBDBDADADAD9D9D9D8D8D8D7D6D6D6D5D5D4D4D3D3D3D2D1D1D1D0D0CFCFCECDCDCCCCCCCBCBCACACAC9C9C9C8C8C8C7C7C6C6C5C5C4C4C3C3C3C2C2C1C1C0BFBFBEBEBDBDBCBBBBBABAB9B9B8B7B7B6B5B5B4B3><C8C7C8C7C5C3C4C2C1C3C1C0BFC1C0BFBEC0BFBEC0BFBEBDBFBDBCBEBDBBB9BBBAB9BCBBBAB9BBBAB8B7B9B8B7B8B7B6B5B6B5B4B5B4B3B1B3B2B0B2B1AFAEB0AFADACAEACABACABAAA9AAA9A7A9A7A6A5A6A5A3A4A3A2A1A2A1A09FA09F9D9E9D9C9B9C9A999A9997969795949594929192908F8E8F8D8C8D8B8A898988878786858384838182817F7D7E7D7B7A7A787777767473737170706F6D6B6B6A68696765636462605E5F5D5B5B59575555535152504E4D4D4C4A4A48474545444241413F3E3E3C3B393A38373736343333323031302E2D2E2C2B2A2B2A28292827252725><B0AFACABA9A8A5A3A29E9E9D9C999897969393939090908F8D8D8C8A8A8A89878787858585848282828280807F7D7D7D7D7B7B7A7978787876767674747373717171706F6E6E6C6C6B6B69696967666666646363616161615F5F5F5E5D5C5C5A5A5A5958575755555454525252504F4F4F4D4C4C4B4A494947464645444343414140403E3E3D3C3B3B3A383837373534333131302F2D2D2C2A2A29292726262423232220201F1F1C1C1B191817171414131110100F0D0C0C0A0909080605050402010100000000000000000000000000000000000000000000000000000000000000><E6E4E3E1DFDEDCDAD9D7D5D3D1D0CECCCBC9C7C5C3C2C0BDBBB9B7B5B3B1AEADAAA8A6A4A2A09E9B99979593908F8C8A88868482807E7C79777573716F6D6B69676563615F5D5B5957565452504E4D4B494846444341403F3D3C3A393736343331302E2D2C2A29282625242322201F1E1D1C1A191917161514131211100F0F0E0D0C0C0B0A090908070706060505040404030303020202010101010101010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000><1313131313131212121212121212121212121111111111111111111111111010101010101010101010100F0F0F0F0F0F0F0F0F0F0F0F0E0E0E0E0E0E0E0E0E0E0E0E0D0D0D0D0D0D0D0D0D0D0D0C0C0C0C0C0C0C0C0C0C0C0C0B0B0B0B0B0B0B0B0B0B0B0B0A0A0A0A0A0A0A0A0A0A0A0A0909090909090909090909090808080808080808080808080707070707070707070707070606060606060606060606050505050505050505050505040404040404040404040404030303030303030303030303020202020202020202020202010101010101010101010101000000000000><0C0D0D0E0F10101112121314151516171818191A1A1B1C1D1D1E1F1F202122222324242526272728292A2A2B2C2C2D2E2F2F30313132333434353636373839393A3B3C3C3D3E3E3F40414142434344454646474848494A4B4B4C4D4E4E4F50505152535354555556575858595A5A5B5C5D5D5E5F60606162626364656566676768696A6A6B6C6C6D6E6F6F70717272737474757677777879797A7B7C7C7D7E7E7F80818182838484858686878889898A8B8B8C8D8E8E8F90909192939394959696979898999A9B9B9C9D9D9E9FA0A0A1A2A2A3A4A5A5A6A7A8A8A9AAAAABACADADAE><0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF>4 %_Br<B3B3B3B3B3B3B3B3B2B2B2B2B2B2B1B1B1B1B1B1B1B0B0B0AFAFAFAFAFAFAEAEAEAEAEADADADADACACABABABABAAAAAAA9A9A8A8A8A7A7A6A5A5A5A4A4A4A3A3A3A2A2A1A1A0A09F9F9E9E9E9D9D9C9C9C9B9B9A9A9999989797969695959494939392929191908F8F8E8E8D8D8C8B8B8A8989888786868584848382828180807F7E7E7D7C7C7B7A797978787776757474737271706F6E6D6C6B6A6968676666656463626261605F5E5E5D5C5B5A595857565554535251504F4E4D4C4B><2525232323232121222020201E1E1E1E1B1C1C19191A17171819161616141414121212131111110F10100E0E0E0F0C0D0D0A0A0B0B08090A08080906070707050506040405030305050303040102020000010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000>00<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBC><AEAEAFAFAFAFB0B0B0B1B1B1B2B2B2B2B3B3B3B4B4B4B5B5B5B5B6B6B6B7B7B7B8B8B8B8B9B9B9BABABABBBBBBBBBCBCBCBDBDBDBDBEBEBEBFBFBFC0C0C0C0C1C1C1C2C2C2C3C3C3C3C4C4C4C5C5C5C6C6C6C6C7C7C7C8C8C8C9C9C9C9CACACACBCBCBCBCCCCCCCDCDCDCECECECECFCFCFD0D0D0D1D1D1D1D2D2D2D3D3D3D4D4D4D4D5D5D5D6D6D6D7D7D7D7D8D8D8D9D9D9D9DADADADBDBDBDCDCDCDCDDDDDDDEDEDEDFDFDFDFE0E0E0E1E1E1E2E2E2E2E3E3E3E4E4E4E5E5E5E5E6E6><EFEFEFEFEFEFEFEFF0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F4F4F4F4F4F4F4F4F4F4F4F4F4F4F4F4F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F9F9F9F9F9F9F9F9F9F9F9F9F9F9F9F9FAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFBFBFBFBFBFBFBFB>4 %_Br<4B4C4D4E4F505152535455565758595A5B5C5D5E5E5F6061626263646566666768696A6B6C6D6E6F707172737474757677787879797A7B7C7C7D7E7E7F8080818282838484858686878889898A8B8B8C8D8D8E8E8F8F9091919292939394949595969697979899999A9A9B9B9C9C9C9D9D9E9E9E9F9FA0A0A1A1A2A2A3A3A3A4A4A4A5A5A5A6A7A7A8A8A8A9A9AAAAAAABABABABACACADADADADAEAEAEAEAEAFAFAFAFAFAFB0B0B0B1B1B1B1B1B1B1B2B2B2B2B2B2B3B3B3B3B3B3B3B3><000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101000002020104030305050303050404060505070707060908080A09080B0B0A0A0D0D0C0F0E0E0E10100F11111113121212141414161616191817171A19191C1C1B1E1E1E1E202020222121232323232525>00<BCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100><E6E6E5E5E5E5E4E4E4E3E3E3E2E2E2E2E1E1E1E0E0E0DFDFDFDFDEDEDEDDDDDDDCDCDCDCDBDBDBDADADAD9D9D9D9D8D8D8D7D7D7D7D6D6D6D5D5D5D4D4D4D4D3D3D3D2D2D2D1D1D1D1D0D0D0CFCFCFCECECECECDCDCDCCCCCCCBCBCBCBCACACAC9C9C9C9C8C8C8C7C7C7C6C6C6C6C5C5C5C4C4C4C3C3C3C3C2C2C2C1C1C1C0C0C0C0BFBFBFBEBEBEBDBDBDBDBCBCBCBBBBBBBBBABABAB9B9B9B8B8B8B8B7B7B7B6B6B6B5B5B5B5B4B4B4B3B3B3B2B2B2B2B1B1B1B0B0B0AFAFAFAFAEAE><FBFBFBFBFBFBFBFBFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAFAF9F9F9F9F9F9F9F9F9F9F9F9F9F9F9F9F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5F4F4F4F4F4F4F4F4F4F4F4F4F4F4F4F4F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0EFEFEFEFEFEFEFEF>4 %_Br<B3B4B5B5B6B7B7B8B9B9BABABBBBBCBDBDBEBEBFBFC0C1C1C2C2C3C3C3C4C4C5C5C6C6C7C7C8C8C8C9C9C9CACACACBCBCCCCCCCDCDCECFCFD0D0D1D1D1D2D3D3D3D4D4D5D5D6D6D6D7D8D8D8D9D9D9DADADADBDBDBDCDCDDDDDDDEDEDEDEDFDFDFDFE0E0E0E0E0E1E1E2E2E2E3E3E3E4E4E4E4E5E5E5E5E6E5E6E6E7E6E7E7E7E7E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E9E9E9E9EAE9E9EAE9EAEAEAEAEAEAEAEAEAEAE9EAEAEAEAEAEBEAEAEAEAEAEAEAE9E9E9EAE9E9E9E8E8E8E8E7E7E7E7E6E6E6E5E3E3E3E2E2E2E1E0DFDFDDDCDAD8D6D5D4D2D1D0CECCCBCAC6C5C4C3C2C2><252725272829282A2B2A2B2C2E2D2E30313032333334363737383A393B3C3E3E3F41414244454547484A4A4C4D4D4E50525153555557595B5B5D5F5E60626463656769686A6B6B6D6F707071737374767777787A7A7B7D7E7D7F818281838483858687878889898A8B8D8C8D8F8E8F9092919294959495979697999A999A9C9B9C9D9E9D9FA09FA0A1A2A1A2A3A4A3A5A6A5A6A7A9A7A9AAA9AAABACABACAEACADAFB0AEAFB1B2B0B2B3B1B3B4B5B4B5B6B5B6B7B8B7B8B9B7B8BABBB9BABBBCB9BABBB9BBBDBEBCBDBFBDBEBFC0BEBFC0BEBFC0C1BFC0C1C3C1C2C4C3C5C7C8C7C8><00000000000000000000000000000000000000000000000000000000000000010102040505060809090A0C0C0D0F101011131414171718191B1C1C1F1F20202223232426262729292A2A2C2D2D2F303131333435373738383A3B3B3C3D3E3E404041414343444546464749494A4B4C4C4D4F4F4F5052525254545555575758595A5A5A5C5C5D5E5F5F5F61616161636364666666676969696B6B6C6C6E6E6F7071717173737474767676787878797A7B7B7D7D7D7D7F80808282828284858585878787898A8A8A8C8D8D8F909090939393969798999C9D9E9EA2A3A5A8A9ABACAFB0><0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010101010101010202020303030404040505060607070809090A0B0C0C0D0E0F0F101112131415161719191A1C1D1E1F20222324252628292A2C2D2E303133343637393A3C3D3F404143444648494B4D4E5052545657595B5D5F61636567696B6D6F71737577797C7E80828486888A8C8F90939597999B9EA0A2A4A6A8AAADAEB1B3B5B7B9BBBDC0C2C3C5C7C9CBCCCED0D1D3D5D7D9DADCDEDFE1E3E4E6><00000000000001010101010101010101010102020202020202020202020203030303030303030303030304040404040404040404040405050505050505050505050506060606060606060606060707070707070707070707070808080808080808080808080909090909090909090909090A0A0A0A0A0A0A0A0A0A0A0A0B0B0B0B0B0B0B0B0B0B0B0B0C0C0C0C0C0C0C0C0C0C0C0C0D0D0D0D0D0D0D0D0D0D0D0E0E0E0E0E0E0E0E0E0E0E0E0F0F0F0F0F0F0F0F0F0F0F0F101010101010101010101010111111111111111111111111121212121212121212121212131313131313><AEADADACABAAAAA9A8A8A7A6A5A5A4A3A2A2A1A0A09F9E9D9D9C9B9B9A99989897969695949393929190908F8E8E8D8C8B8B8A89898887868685848483828181807F7E7E7D7C7C7B7A79797877777675747473727271706F6F6E6D6C6C6B6A6A69686767666565646362626160605F5E5D5D5C5B5A5A59585857565555545353525150504F4E4E4D4C4B4B4A49484847464645444343424141403F3E3E3D3C3C3B3A39393837363635343433323131302F2F2E2D2C2C2B2A2A292827272625242423222221201F1F1E1D1D1C1B1A1A19181817161515141312121110100F0E0D0D0C><EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E>4 %_Br0.7599450.7859770.6917370.901060.074510.0470590.0549024 %_Br<C2BFBEBBB9B7B5B3B1AEAEACABA9A8A6A6A4A4A2A2A0A09E9E9C9C9A9A98989696949492918F8F8D8D8B8B8A8A888887878586848583848282818180807E7F7D7E7C7D7B7C7A7B797978787777767675767475747473737272717170706F6F6E6E6D6D6C6C6B6B6A6A6A6A69696868676766666565646463636262616160605F5F5D5D5C5C5B5B5A5A595958585757565554545353525150504F4E4D4D4B4B4A494847464544434241403F3D3C3B39383736343331302F2D2B2A2826252321201E1D1B1A18161413110F0E0C0A090705040200000000000000000000><C8C9CBCBCACBCDCED1D2D5D3D6D7D9DADCDDDEDDDEDFE1E1E3E4E3E3E5E5E6E6E7E6E8E8EAEBEDEEEFEEEFF0F1F2F3F3F2F2F2F3F3F3F4F2F3F3F4F4F5F5F6F5F5F6F6F7F7F8F6F6F7F7F7F7F8F6F7F7F8F8F8F9F7F7F8F7F8F8F8F8F7F7F8F8F8F9F9F8F8F8F8F8F8F8F7F7F8F8F9F9F9F9F8F8F8F8F8F8F8F7F7F7F8F8F8F8F7F7F7F8F8F8F8F8F7F6F6F6F6F6F6F5F5F5F5F5F5F5F4F4F4F4F4F4F4F4F4F4F3F3F3F3F3F2F2F2F2F2F2F2F2F2F1F1F1F1F1F0F0F0EFEFEFEFEFEEEEEEEEEEEDEDEDEDECECECECECEBEBEBEAEAEAEAEAE9E8E8E8E7E7E7E6E6E5E5><B0B0ADACABABA7A7A3A3A0A3A0A09D9E9B9C999B999A9798969695959494929290918F908D8E8C8C8A8C8A8B898A888988898788868785878586848583858385838482838283828381828181808180817F807E7F7E7F7D7E7C7D7B7C7B7C7A7B797A797A7979787977787778767776777576757674757374727472737172707170706F6F6E6E6D6D6C6D6B6C6A6B696A696968686667666664656363626261615F605E5E5C5D5B5B5959575755565354525250504E4E4C4C49494747454542423F3F3D3D3B3B38383636343431322F2F2D2E2B2B2929262725252324><E6E5E4E4E2E1E0DFDEDDDCDBDADAD8D8D6D6D4D4D2D1D0CFCECDCBCBC9C8C6C6C3C3C1C0BEBDBBBBB8B8B5B5B2B2AFAFACABA9A8A6A5A3A2A09F9D9C9A9997969392908F8D8C898886858382807F7D7C797876757372706F6C6B6968666562615F5E5C5B595856555251504F4D4C4B4A4847454442413F3E3C3B393836353332302F2D2C2A29272725242222201F1E1D1C1B1919171615141211100F0E0E0C0C0B0B0A090808070605050404030302020202010101010000000000000000000000000000000000000000000000000000000000000000000000000000><131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEE><0C0C0C0C0D0D0D0D0D0D0D0E0E0E0E0E0E0E0E0F0F0F0F0F0F0F101010101010101111111111111111121212121212121313131313131314141414141414141515151515151516161616161616171717171717171818181818181818191919191919191A1A1A1A1A1A1A1B1B1B1B1B1B1B1B1C1C1C1C1C1C1C1D1D1D1D1D1D1D1E1E1E1E1E1E1E1E1F1F1F1F1F1F1F202020202020202121212121212122222222222222222323232323232324242424242424252525252525252526262626262626272727272727272828282828282828292929292929292A2A2A2A><0E0E0F0F10101111121213131414151516161717181819191A1A1B1B1C1C1D1D1E1E1F1F20202121222223232424252526262727282829292A2A2B2B2C2C2D2D2E2E2F2F30303131323233333434353536363737383839393A3A3B3B3C3C3D3D3E3E3F3F40404141424243434444454546464747484849494A4A4B4B4C4C4D4D4E4E4F4F50505151525253535454555556565757585859595A5A5B5B5C5C5D5D5E5E5F5F60606161626263636464656566666767686869696A6A6B6B6C6C6D6D6E6E6F6F70707171727273737474757576767777787879797A7A7B7B>4 %_Br<0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100010001030202030203030303030405050506050708070808080908090909090A090A0B0A0C0C0D0D0D0D0E0E0E0F0E0F0E0F0F0E0F11101111111211111211121212121212141414141415151515><E5E5E4E4E3E2E2E1E0E0DFDFDEDEDDDCDCDBDBDAD9D9D8D7D7D6D6D5D4D3D3D2D1D1D0CFCECDCDCCCBCAC9C8C7C7C6C5C4C3C2C1C0BFBEBDBCBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACACABA9A9A8A7A5A4A3A2A1A09F9E9D9C9A999897969594939291908F8E8D8C8A89888685848281807F7E7D7B7A79787776757472716F6E6D6C6A6968><242222211F1F1D1E1C1A1B19171816141413111210110F0D0E0C0A0B09080907080604050402030100010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000>0<EEEEEEEEEEEEEEEEEEEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDECECECECECECECECECECECECECECECECECEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAE9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E7E7E7E7E7E7E7E7E7E7E7E7E7E7E7E7E6E6E6E6E6E6E6E6E6><2A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAF><7B7C7C7D7E7E7F7F8081818283838485858687878888898A8A8B8C8C8D8E8E8F8F9091919293939495959696979898999A9A9B9C9C9D9E9E9F9FA0A1A1A2A3A3A4A5A5A6A6A7A8A8A9AAAAABACACADADAEAFAFB0B1B1B2B3B3B4B5B5B6B6B7B8B8B9BABABBBCBCBDBDBEBFBFC0C1C1C2C3C3C4C4C5C6C6C7C8C8C9CACACBCCCCCDCDCECFCFD0>4 %_Br<151515151414141414121212121212111211111211111110110F0E0F0F0E0F0E0F0E0E0E0D0D0D0D0C0C0A0B0A090A090909090809080808070807050605050504030303030302030202030100010001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000><68696A6C6D6E6F71727475767778797A7B7D7E7F80818284858688898A8C8D8E8F909192939495969798999A9C9D9E9FA0A1A2A3A4A5A7A8A9A9ABACACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBCBDBEBFC0C1C2C3C4C5C6C7C7C8C9CACBCCCDCDCECFD0D1D1D2D3D3D4D5D6D6D7D7D8D9D9DADBDBDCDCDDDEDEDFDFE0E0E1E2E2E3E4E4E5E5><000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000103020405040608070908090B0A0C0E0D0F11101211131414161817191B1A1C1E1D1F1F21222224>0<E6E6E6E6E6E6E6E6E6E7E7E7E7E7E7E7E7E7E7E7E7E7E7E7E7E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E8E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9E9EAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEAEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBEBECECECECECECECECECECECECECECECECECEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEDEEEEEEEEEEEEEEEEEE><AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A><D0CFCFCECDCDCCCCCBCACAC9C8C8C7C6C6C5C4C4C3C3C2C1C1C0BFBFBEBDBDBCBCBBBABAB9B8B8B7B6B6B5B5B4B3B3B2B1B1B0AFAFAEADADACACABAAAAA9A8A8A7A6A6A5A5A4A3A3A2A1A1A09F9F9E9E9D9C9C9B9A9A9998989796969595949393929191908F8F8E8E8D8C8C8B8A8A8988888787868585848383828181807F7F7E7E7D7C7C7B>4 %_Br<0000000000000000000002040507090A0C0E0F11131416181A1B1D1E2021232526282A2B2D2F30313334363738393B3C3D3F404142434445464748494A4B4B4D4D4E4F505051525353545455565757585859595A5A5B5B5C5C5D5D5F5F60606161626263636464656566666767686869696A6A6A6A6B6B6C6C6D6D6E6E6F6F707071717272737374747574767576767777787879797B7A7C7B7D7C7E7D7F7E808081818282848385848685878788888A8A8B8B8D8D8F8F91929494969698989A9A9C9C9E9EA0A0A2A2A4A4A6A6A8A9ABACAEAEB1B3B5B7B9BBBEBFC2><E5E5E6E6E7E7E7E8E8E8E9EAEAEAEAEAEBEBEBECECECECECEDEDEDEDEEEEEEEEEEEFEFEFEFEFF0F0F0F1F1F1F1F1F2F2F2F2F2F2F2F2F2F3F3F3F3F3F4F4F4F4F4F4F4F4F4F4F5F5F5F5F5F5F5F6F6F6F6F6F6F7F8F8F8F8F8F7F7F7F8F8F8F8F7F7F7F8F8F8F8F8F8F8F9F9F9F9F8F8F7F7F8F8F8F8F8F8F8F9F9F8F8F8F7F7F8F8F8F8F7F8F7F7F9F8F8F8F7F7F6F8F7F7F7F7F6F6F8F7F7F6F6F5F5F6F5F5F4F4F3F3F2F4F3F3F3F2F2F2F3F3F2F1F0EFEEEFEEEDEBEAE8E8E6E7E6E6E5E5E3E3E4E3E1E1DFDEDDDEDDDCDAD9D7D6D3D5D2D1CECDCBCACBCBC9C8><24232525272629292B2B2E2D2F2F32313434363638383B3B3D3D3F3F42424545474749494C4C4E4E5050525254535655575759595B5B5D5C5E5E605F616162626363656466666766686869696A696B6A6C6B6D6C6D6D6E6E6F6F7070717072717372747274737574767576757776777678777877797879797A797A797B7A7C7B7C7B7D7C7E7D7F7E7F7E807F818081808181828183828382838284838583858385848685878587868887898889888A898B8A8C8A8C8C8E8D908F9190929294949595969698979A999B999C9B9E9DA0A0A3A0A3A3A7A7ABABACADB0B0><0000000000000000000000000000000000000000000000000000000000000000000000000000010101010202020203030404050506070808090A0B0B0C0C0E0E0F1011121415161719191B1C1D1E1F20222224252727292A2C2D2F303233353638393B3C3E3F4142444547484A4B4C4D4F505152555658595B5C5E5F6162656668696B6C6F707273757678797C7D7F808283858688898C8D8F9092939697999A9C9D9FA0A2A3A5A6A8A9ABACAFAFB2B2B5B5B8B8BBBBBDBEC0C1C3C3C6C6C8C9CBCBCDCECFD0D1D2D4D4D6D6D8D8DADADBDCDDDEDFE0E1E2E4E4E5E6><EEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A19181716151413><2A2A2A2A292929292929292828282828282828272727272727272626262626262625252525252525252424242424242423232323232323222222222222222221212121212121202020202020201F1F1F1F1F1F1F1E1E1E1E1E1E1E1E1D1D1D1D1D1D1D1C1C1C1C1C1C1C1B1B1B1B1B1B1B1B1A1A1A1A1A1A1A191919191919191818181818181818171717171717171616161616161615151515151515141414141414141413131313131313121212121212121111111111111111101010101010100F0F0F0F0F0F0F0E0E0E0E0E0E0E0E0D0D0D0D0D0D0D0C0C0C0C><7B7B7A7A79797878777776767575747473737272717170706F6F6E6E6D6D6C6C6B6B6A6A69696868676766666565646463636262616160605F5F5E5E5D5D5C5C5B5B5A5A59595858575756565555545453535252515150504F4F4E4E4D4D4C4C4B4B4A4A49494848474746464545444443434242414140403F3F3E3E3D3D3C3C3B3B3A3A39393838373736363535343433333232313130302F2F2E2E2D2D2C2C2B2B2A2A29292828272726262525242423232222212120201F1F1E1E1D1D1C1C1B1B1A1A19191818171716161515141413131212111110100F0F0E0E>4 %_Br0.7599450.7859770.6917370.901060.074510.0470590.0549024 %_Br<C2C1C1C0BFBEBFBEBEBDBFBFBFBFC1C1C1C1C3C3C3C4C4C4C3C5C4C4C3C5C4C4C3C5C5C4C4C5C5C5C5C6C6C5C7C6C6C5C6C6C5C5C5C5C4C4C5C4C4C3C4C4C3C4C4C3C3C4C4C3C3C4C3C3C2C3C2C1C1C2C1C0C0C0C0BFC0BFBFBEBFBEBEBDBEBDBDBCBCBCBBBABBBABABAB9B8B8B8B7B6B5B5B4B4B2B3B1B0AFAFAEADACACABAAAAA9A7A6A6A5A4A3A3A2A19F9F9E9D9C9C9B><C8CAC9CAC9CBCACDCCCFCDD0D3D2D4D3D6D5D7D7D9D8DBDDDBDDDCDEDCDDDBDEDDDEE0DFE1E0E1E0E2E0E2E0E2E3E2E3E1E3E2E3E2E3E2E3E5E3E4E3E4E2E3E2E3E2E3E4E2E4E2E3E2E3E1E2E0E1E0E1E1E0E1E0E0DFE0DFDFDEDEDFDEDFDEDEDEDEDDDEDCDDDDDCDCDBDBDADBD9DAD8D9D9D8D8D7D7D6D6D5D5D3D3D3D2D2D1D1D0D0CECECDCDCDCCCCCACAC9C9C8C8C7C7><B0ADACA8A7A3A19E9D9A999693928F8E8B8B888785858381817E7E7C7C7A7A7878767474727270706E6E6D6D6B6A6A68686767656563636260605F5F5D5D5C5B5A595856565454535251504F4F4D4D4B4A4A4847464644444242403F3E3D3D3B3B3939373735333231302E2D2C2B292826242321201E1D1B1A171613110F0D0B090805040201000000000000000000000000><E6E4E3E1DFDDDCDAD8D6D4D3D1CFCDCCCAC8C6C5C3C1BFBCBAB8B6B4B1AFADABA9A6A4A29F9D9B989694928F8D8B888683817F7C7A787573716E6C6A676562605E5C59575552504E4C49474543413F3D3A39363533312F2D2B2927252422211F1E1C1B191816151312110F0E0C0B0A0908070706050404030202010101010000000000000000000000000000000000000000><1314141516171718191A1A1B1C1D1D1E1F20202122222324252526272828292A2B2B2C2D2E2E2F30313132333334353636373839393A3B3C3C3D3E3F3F404141424344444546474748494A4A4B4C4D4D4E4F50505152525354555556575858595A5B5B5C5D5E5E5F60606162636364656666676869696A6B6C6C6D6E6F6F707171727374747576777778797A7A7B7C7D7D7E><0C0C0D0D0E0E0F0F101011111112121313141415151616161717181819191A1A1B1B1B1C1C1D1D1E1E1F1F202020212122222323242425252526262727282829292A2A2A2B2B2C2C2D2D2E2E2F2F303030313132323333343435353536363737383839393A3A3A3B3B3C3C3D3D3E3E3F3F3F404041414242434344444445454646474748484949494A4A4B4B4C4C4D4D4E4E><0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9F>4 %_Br<9B99989795949392908F8E8D8C8A89888785848381807E7D7C7B79787776747271706E6D6C6B69686765646362605F5E5D5C5A595755545352504F4E4D4B4A48474645444241403F3E3C3B3A39373635333231302E2D2B2A29272625232221201E1D1C1B19181715><C7C6C4C3C2C1C0BFBDBEBCBBBAB9B8B7B6B5B4B3B1B0AFAEADACACABAAA9A8A6A5A4A3A2A1A09F9E9D9C9B9B9A99999796969594939291908F8F8E8D8C8C8B8A89888787868584838281807F7F7E7E7D7C7B7A797877767574737271706F6F6F6E6D6C6B6B6A6968>00<7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6><4E4F50515253545556565758595A5B5C5D5E5F60616263646566666768696A6B6C6D6E6F70717273747576767778797A7B7C7D7E7F80818283848586878788898A8B8C8D8E8F90919293949596979798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A7A8A9AAABACADAEAF><9F9FA0A0A1A1A2A2A3A3A4A4A5A5A6A6A7A7A8A8A9A9A9AAAAABABACACADADAEAEAFAFB0B0B1B1B2B2B3B3B3B4B4B5B5B6B6B7B7B8B8B9B9BABABBBBBCBCBCBDBDBEBEBFBFC0C0C1C1C2C2C3C3C4C4C5C5C6C6C6C7C7C8C8C9C9CACACBCBCCCCCDCDCECECFCFD0D0>4 %_Br<151718191B1C1D1E20212223252627292A2B2D2E30313233353637393A3B3C3E3F40414244454647484A4B4D4E4F505253545557595A5C5D5E5F60626364656768696B6C6D6E70717274767778797B7C7D7E80818384858788898A8C8D8E8F90929394959798999B><68696A6B6B6C6D6E6F6F6F707172737475767778797A7B7C7D7E7E7F7F80818283848586878788898A8B8C8C8D8E8F8F90919293949596969799999A9B9B9C9D9E9FA0A1A2A3A4A5A6A8A9AAABACACADAEAFB0B1B3B4B5B6B7B8B9BABBBCBEBDBFC0C1C2C3C4C6C7>00<E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E><AFAEADACABAAA9A8A7A7A6A5A4A3A2A1A09F9E9D9C9B9A99989797969594939291908F8E8D8C8B8A89888787868584838281807F7E7D7C7B7A79787776767574737271706F6E6D6C6B6A69686766666564636261605F5E5D5C5B5A59585756565554535251504F4E><D0D0CFCFCECECDCDCCCCCBCBCACAC9C9C8C8C7C7C6C6C6C5C5C4C4C3C3C2C2C1C1C0C0BFBFBEBEBDBDBCBCBCBBBBBABAB9B9B8B8B7B7B6B6B5B5B4B4B3B3B3B2B2B1B1B0B0AFAFAEAEADADACACABABAAAAA9A9A9A8A8A7A7A6A6A5A5A4A4A3A3A2A2A1A1A0A09F9F>4 %_Br<9B9C9C9D9E9F9FA1A2A3A3A4A5A6A6A7A9AAAAABACACADAEAFAFB0B1B3B2B4B4B5B5B6B7B8B8B8B9BABABABBBABBBCBCBCBDBDBEBDBEBEBFBEBFBFC0BFC0C0C0C0C1C2C1C1C2C3C2C3C3C4C3C3C4C4C3C3C4C4C3C4C4C3C4C4C5C4C4C5C5C5C5C6C6C5C6C6C7C5C6C6C5C5C5C5C4C4C5C5C3C4C4C5C3C4C4C5C3C4C4C4C3C3C3C1C1C1C1BFBFBFBFBDBEBEBFBEBFC0C1C1C2><C7C7C8C8C9C9CACACCCCCDCDCDCECED0D0D1D1D2D2D3D3D3D5D5D6D6D7D7D8D8D9D9D8DAD9DBDADBDBDCDCDDDDDCDEDDDEDEDEDEDFDEDFDEDEDFDFE0DFE0E0E1E0E1E1E0E1E0E2E1E3E2E3E2E4E2E4E3E2E3E2E3E2E4E3E4E3E5E3E2E3E2E3E2E3E1E3E2E3E2E0E2E0E2E0E1E0E1DFE0DEDDDEDBDDDCDEDCDDDBDDDBD8D9D7D7D5D6D3D4D2D3D0CDCFCCCDCACBC9CAC9CAC8><0000000000000000000000000102040508090B0D0F111316171A1B1D1E202123242628292B2C2D2E3031323335373739393B3B3D3D3E3F4042424444464647484A4A4B4D4D4F4F505152535454565658595A5B5C5D5D5F5F60606263636565676768686A6A6B6D6D6E6E7070727274747678787A7A7C7C7E7E818183858587888B8B8E8F929396999A9D9EA1A3A7A8ACADB0><00000000000000000000000000000000000000000101010102020304040506070708090A0B0C0E0F111213151618191B1C1E1F2122242527292B2D2F31333536393A3D3F41434547494C4E50525557595C5E606265676A6C6E717375787A7C7F818386888B8D8F929496989B9D9FA2A4A6A9ABADAFB1B4B6B8BABCBFC1C3C5C6C8CACCCDCFD1D3D4D6D8DADCDDDFE1E3E4E6><7E7D7D7C7B7A7A797877777675747473727171706F6F6E6D6C6C6B6A69696867666665646363626160605F5E5E5D5C5B5B5A59585857565555545352525150504F4E4D4D4C4B4A4A494847474645444443424141403F3F3E3D3C3C3B3A39393837363635343333323131302F2E2E2D2C2B2B2A29282827262525242322222120201F1E1D1D1C1B1A1A191817171615141413><4E4E4D4D4C4C4B4B4A4A494949484847474646454544444443434242414140403F3F3F3E3E3D3D3C3C3B3B3A3A3A393938383737363635353534343333323231313030302F2F2E2E2D2D2C2C2B2B2A2A2A292928282727262625252524242323222221212020201F1F1E1E1D1D1C1C1B1B1B1A1A191918181717161616151514141313121211111110100F0F0E0E0D0D0C0C><9F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E>4 %_Br0.7599450.7859770.6917370.901060.074510.0470590.0549024 %_Br[0.759945 0.785977 0.691737 0.90106 0.07451 0.047059 0.054902 2 75.6015 73.8792 %_BS%_0.759945 0.785977 0.691737 0.90106 0.07451 0.047059 0.054902 2 75.6015 73.8792 Bs0.759945 0.785977 0.691737 0.90106 0.07451 0.047059 0.054902 2 50 87.8493 %_BS%_0.759945 0.785977 0.691737 0.90106 0.07451 0.047059 0.054902 2 50 87.8493 Bs0.703792 0.145968 0 0 0 0.682353 0.937255 2 50 88.1542 %_BS%_0.703792 0.145968 0 0 0 0.682353 0.937255 2 50 88.1542 Bs0.295781 0 0 0 0.737255 0.901961 0.984314 2 50 88.7967 %_BS%_0.295781 0 0 0 0.737255 0.901961 0.984314 2 50 88.7967 Bs0.703792 0.145968 0 0 0 0.682353 0.937255 2 50 89.2704 %_BS%_0.703792 0.145968 0 0 0 0.682353 0.937255 2 50 89.2704 Bs0.759945 0.785977 0.691737 0.90106 0.07451 0.047059 0.054902 2 50 89.6428 %_BS%_0.759945 0.785977 0.691737 0.90106 0.07451 0.047059 0.054902 2 50 89.6428 Bs0.759945 0.785977 0.691737 0.90106 0.07451 0.047059 0.054902 2 50 90.8946 %_BS%_0.759945 0.785977 0.691737 0.90106 0.07451 0.047059 0.054902 2 50 90.8946 Bs0 0.899382 0.140261 0 0.933333 0.164706 0.482353 2 50 91.2834 %_BS%_0 0.899382 0.140261 0 0.933333 0.164706 0.482353 2 50 91.2834 Bs0.083619 0.407721 0 0 0.901961 0.686275 0.815686 2 50 92.2176 %_BS%_0.083619 0.407721 0 0 0.901961 0.686275 0.815686 2 50 92.2176 Bs0 0.899382 0.140261 0 0.933333 0.164706 0.482353 2 50 92.7625 %_BS%_0 0.899382 0.140261 0 0.933333 0.164706 0.482353 2 50 92.7625 Bs0.759945 0.785977 0.691737 0.90106 0.07451 0.047059 0.054902 2 50 93.1133 %_BS%_0.759945 0.785977 0.691737 0.90106 0.07451 0.047059 0.054902 2 50 93.1133 Bs0.759945 0.785977 0.691737 0.90106 0.07451 0.047059 0.054902 2 50 94.3587 %_BS%_0.759945 0.785977 0.691737 0.90106 0.07451 0.047059 0.054902 2 50 94.3587 Bs0.607874 0.779477 0 0 0.494118 0.305882 0.623529 2 50 94.7866 %_BS%_0.607874 0.779477 0 0 0.494118 0.305882 0.623529 2 50 94.7866 Bs0.083619 0.407721 0 0 0.901961 0.686275 0.815686 2 50 95.6817 %_BS%_0.083619 0.407721 0 0 0.901961 0.686275 0.815686 2 50 95.6817 Bs0.607874 0.779477 0 0 0.494118 0.305882 0.623529 2 50 96.3828 %_BS%_0.607874 0.779477 0 0 0.494118 0.305882 0.623529 2 50 96.3828 Bs0.759945 0.785977 0.691737 0.90106 0.07451 0.047059 0.054902 2 26.3746 96.8106 %_BS%_0.759945 0.785977 0.691737 0.90106 0.07451 0.047059 0.054902 2 26.3746 96.8106 Bs0.759945 0.785977 0.691737 0.90106 0.07451 0.047059 0.054902 2 50 99.929 %_BS%_0.759945 0.785977 0.691737 0.90106 0.07451 0.047059 0.054902 2 50 99.929 BsBD%AI5_EndGradient%AI5_BeginGradient: (Rosa radial)(Rosa radial) 1 2 Bd[0<000002040507080A0C0D0F101213151618191B1C1C1E202123242627292A2B2D2E2F30303233353637383A3B3B3C3E3F40424345444647484A4B4D4D4E4F5152535354555758585A5B5D5E5E5F616263636466676868696A6B6B6C6D6F6F7071727273747575777878797A7B7B7D7E7E7F80808182828485858687878889898A8B8B8C8D8D8E8F8F9090919292939394969597979899999A9A9B9C9C9D9D9E9E9F9FA0A1A1A2A2A3A3A4A4A5A5A5A5A6A6A7A7A8A8A9A9AAAAABABACACAEAEAFAFAFB0B0B1B1B2B2B2B3B3B4B4B5B4B4B5B5B6B6B6B7B7B8B8B8B9B9B9BABABABBBBBCBCBCBDBDBDBDBDBDBDBEBEBEBFBFBFC0C0C0C0C1C1C1C2C2C2C1C2C2C2C2C3C3C3C3C4C4C4C4C4C5C5C5C5C5C6C6C6C6C6C6C7C7C7C7C7C7C8C8C8C8C8C8C8C7C8C8C8C8C8C8C8C8C8C8C9C9C9C9C9C9C9C9C9C9C9C9C9C9><00000001020303040505060605060607070809090B0C0D0E0F0D0E0F0F10111112121313141415161717181719191A1B1B1C1B1C1D1E1E1F1E1F1F212120212222242324252628272828292B2A2A2B2B2B2C2D2D2C2E2F2F2E303131303233323335353435373637393838393B3A3A3C3B3C3E3D3D3F3E3F414041414243434445454647474847494A4A4B4A4C4D4D4E4D4F4E50505051505251525453555456555756575758585A5A5B5B5C5C5D5D5E5E5F5F60606161626263636464656564666667676868686A6A6B6B6A6C6B6D6D6D6E6E6F6F6F7070717171737372747473757474767575777676787878787979797B7A7A7C7C7C7C7D7D7D7D7F7E7E7E8080808080818181818282828282838383838383858484848484868585858585858587868686868686868686868888888888888888888888888888>01<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDEDDDCDBDAD9D8D7D6D6D5D4D3D2D1D0CFCFCECDCCCBCAC9C9C8C7C6C5C4C4C3C2C1C0C0BFBEBDBCBCBBBAB9B8B8B7B6B5B4B4B3B2B1B1B0AFAEAEADACABABAAA9A8A8A7A6A6A5A4A3A3A2A1A1A09F9F9E9D9D9C9B9B9A999998979796959594939392919190908F8E8E8D8D8C8B8B8A8A89888887878685858484838382828180807F7F7E7E7D7D7C7C7B7B7A7A7979787877777676757574747373727272717170706F6F6F6E6E6D6D6C6C6C6B6B6A6A6A69696868686767676666666565646464636363626262626161616060605F5F5F5F5E5E5E5D5D5D5D5C5C5C5C5B5B5B5B5A5A5A5A5A59595959595858585858585757575757575656565656565656555555555555555555555454545454545454545454545454><FFFEFDFCFBFAF9F8F7F6F5F4F4F3F2F1F0EFEEEDECEBEAE9E8E8E7E6E5E4E3E2E1E0DFDFDEDDDCDBDAD9D8D8D7D6D5D4D3D2D2D1D0CFCECDCDCCCBCAC9C9C8C7C6C5C5C4C3C2C1C1C0BFBEBDBDBCBBBABAB9B8B7B7B6B5B4B4B3B2B1B1B0AFAFAEADACACABAAAAA9A8A8A7A6A5A5A4A3A3A2A1A1A09F9F9E9D9D9C9C9B9A9A999898979696959594939392929190908F8F8E8E8D8C8C8B8B8A8A898888878786868585848483838282818180807F7F7E7E7D7D7C7C7B7B7A7A7979787877777776767575747474737372727271717070706F6F6E6E6E6D6D6C6C6C6B6B6B6A6A6A6969696868686767676666666665656564646463636363626262626161616160606060605F5F5F5F5E5E5E5E5E5D5D5D5D5D5D5C5C5C5C5C5C5B5B5B5B5B5B5B5B5A5A5A5A5A5A5A5A5A5A5A5959595959595959595959595959>4 %_Br[0 0 0 0 1 1 1 2 31.3953 49.7076 %_BS%_0 0 0 0 1 1 1 2 31.3953 49.7076 Bs0 0.788815 0.531975 0 1 0.329412 0.34902 2 50 100 %_BS%_0 0.788815 0.531975 0 1 0.329412 0.34902 2 50 100 BsBD%AI5_EndGradient%AI5_BeginGradient: (Schwarz\637bergang zu Kante)(Schwarz\637bergang zu Kante) 0 3 Bd[0.7301290.7111160.6368350.7620510.1372550.1215690.125494 %_Br0.7301290.7111160.6368350.7620510.1372550.1215690.125494 %_Br[0.730129 0.711116 0.636835 0.762051 0.137255 0.121569 0.12549 2 50 100 %_BS%_0.730129 0.711116 0.636835 0.762051 0.137255 0.121569 0.12549 2 50 100 Bs0.730129 0.711116 0.636835 0.762051 0.137255 0.121569 0.12549 2 50 50 %_BS%_0.730129 0.711116 0.636835 0.762051 0.137255 0.121569 0.12549 2 50 50 Bs0.730129 0.711116 0.636835 0.762051 0.137255 0.121569 0.12549 2 50 0 %_BS%_0.730129 0.711116 0.636835 0.762051 0.137255 0.121569 0.12549 2 50 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 11)(Unnamed gradient 11) 0 3 Bd[0<A7A7A8A8A9A9AAAAABABABACACACADADAEAEAFAFAFAFB0B0B1B1B1B2B2B3B3B4B4B5B5B5B6B6B7B7B8B8B8B9B9BABABBBBBBBBBBBCBCBDBDBEBEBFBFBFBFBFC0C0C1C1C1C2C2C2C2C3C3C4C4><03050608090B0C0E0F11131416181A1B1C1E1F2123252628292B2D2E303133353738393C3D3F424546484A4B4D4E5052545557595A5C5D5F6062636567686A6B6D6F7072737577797A7C7D7F>01<7B7B7A7A79797878777777767675757474747373727271717070706F6F6E6E6D6D6C6C6C6B6B6A6A69696968686767666665656564646363626261616160605F5F5E5E5E5D5D5C5C5B5B5A5A><ACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A8988878584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A69686766656463626160>4 %_Br0<8585858787878787878888888888888A8A8A8A8A8A8B8B8B8B8B8B8D8D8D8D8D8D8F8F8F8F8F8F90909090909092929292929293939393939394949495959596969696969697979797979899999999999A9A9B9B9B9B9C9C9D9D9D9D9E9E9E9E9E9E9F9F9F9F9F9FA0A0A0A0A0A1A1A1A2A2A2A2A2A2A2A2A2A3A3A3A3A3A4A4A5A5A5A4A4A4A5A5A5A5A5A5A6A7A7><E1E1E0E0DFDEDEDDDCDCDBDAD9D8D7D7D6D5D4D3D2D1D0CFCFCECCCBCAC8C7C6C5C4C3C2C1C0BEBDBBBAB8B7B6B4B3B2B1B0AFAEADABAAA8A7A5A4A2A19F9E9C9B999896959392908F8E8B8A88868583817F7E7C7B7977757472706F6C6A68666462605E5C5B59575452514F4D4B49474543413F3C3A383634322F2D2B29272522201E1C1A181513110F0C0A070503>01<9393939292929292929191919191919090909090908F8F8F8F8F8F8E8E8E8E8E8E8D8D8D8D8D8D8C8C8C8C8C8C8B8B8B8B8B8B8A8A8A8A8A8A89898989898988888888888887878787878686868686868585858585858484848484848383838383838282828282828181818181818080808080807F7F7F7F7F7F7E7E7E7E7E7E7D7D7D7D7D7D7C7C7C7C7C7C7B7B7B><1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABAC>4 %_Br[0 0.768154 0.498512 0 1 0.352941 0.376471 2 50 100 %_BS%_0 0.768154 0.498512 0 1 0.352941 0.376471 2 50 100 Bs0 0.65301 0.01297 0 1 0.482353 0.67451 2 50 61.7977 %_BS%_0 0.65301 0.01297 0 1 0.482353 0.67451 2 50 61.7977 Bs0 0.522942 0.883574 0 1 0.576471 0.117647 2 50 0 %_BS%_0 0.522942 0.883574 0 1 0.576471 0.117647 2 50 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 139)(Unnamed gradient 139) 1 2 Bd[00001114 %_Br[0 0 0 0 1 1 1 2 87 36.6667 %_BS%_0 0 0 0 1 1 1 2 87 36.6667 Bs0 0 0 0 1 1 1 2 50 100 %_BS%_0 0 0 0 1 1 1 2 50 100 BsBD%AI5_EndGradient%AI5_BeginGradient: (Unnamed gradient 3)(Unnamed gradient 3) 0 2 Bd[<0000010304050607090A0B0C0E0F111214151718191A1B1C1D1F2021222324252628292A2B2C2D2E2F303233343637383A3B3C3D3E4041424344454648494A4B4C4D4E4F5051525354555758595A5C5D5E6061626465666768696A6B6C6D6E6F707172737476777879797A7B7C7D7E7F80818182838384858686878889898A8B8C8D8E8F909091929393949495969697979899999A9B9B9C9D9D9E9E9F9FA0A1A1A2A2A3A4A4A5A6A6A7A7A8A8A9A9AAAAABABACACADADAEAFAFB0B0B0B1B1B2B2B3B3B4B4B4B5B5B6B6B7B7B7B8B8B9B9B9BABABBBBBBBCBDBDBEBEBFBFC0C0C1C1C2C2C3C3C3C3C4C4C4C5C5C5C6C8C9CBCCCDCED0D1D2D3D4D5D6D8D9DADB><0000010203040505060708090A0B0C0D0E0F1011121313141516171819191A1B1C1D1E1E1F20212223232425262728292A2B2C2D2E2F303132333435363738393A3A3B3C3D3E3F404142434445464748494A4C4D4D4E4F505152535455565758595A5B5C5D5E5F5F60616263646566676868696A6B6B6C6D6E6E6F7070717273747475767778797A7A7B7C7C7D7E7E7F7F8081818282838484858686878889898A8B8C8C8D8E8E8F8F909091929293949495959696979898999A9A9A9B9C9C9D9D9E9E9FA0A0A1A1A2A2A3A3A4A5A5A6A6A7A8A8A9A9AAABABACADAEAEAFB0B1B2B2B3B4B5B5B6B6B7B7B8B9B9BABBBDBFC1C3C5C7C8CACBCDCFD0D2D4D5D7D9><0000010203040505060708090A0A0B0C0D0E0F1010111213141515161718191A1B1B1C1D1E1F20202122232425262728292A2B2C2D2D2E2F2F3031323233343536373738393A3B3C3D3D3E3F404142434445464748494A4B4C4D4E4E4F50515253545455565758595A5B5B5C5D5E5E5F60616162636364656666676868696A6A6B6B6C6D6E6F707171727373747575767677787879797A7B7B7C7D7D7E7E7F80808181828383848585868687878889898A8B8B8C8C8D8E8E8F8F9090919192929394949595969697989899999A9B9B9C9C9D9D9E9E9FA0A0A1A2A2A3A3A4A5A5A6A7A8A8A9AAABABABACACADAEAEB0B2B3B5B6B8B9BBBCBEBFC1C2C4C5C7C8C9><000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101010101020202030304040505060607070809090A0A0B0C0D0E0F1010111213151618191A1B1C1D1E20212223242627282A2B2D2E303133343637393A3C3D3F41434446484A4C4D4F51535557595B5D5F61636567696B6D6E6F717375787A7C7E818385878A8C8E909395979A9C9FA1A3A6A8AAADAFB2B4B7B9BBBEC0C2C5C7CACCCED0D2D4D5D7D8DADCDEE0E2E4E6E8EAECEEEFF1F3F4F6F8FAFCFDFF><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100><FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>4 %_Br[0.860075 0.849699 0.789548 1 0 0 0 2 50 100 %_BS%_0.860075 0.849699 0.789548 1 0 0 0 2 50 100 Bs0 0 0 0 1 1 1 2 50 0 %_BS%_0 0 0 0 1 1 1 2 50 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Wasser)(Wasser) 0 5 Bd[<CFD0D1D2D2D3D4D4D4D5D5D6D6D6D7D7D8D8D8D9D9D9DADADBDBDCDCDC><4F51535556585A595B5C5E5F616264656668696A6C6B6C6E6F70717374><3B3C3D3E3E3F4042434344444545464849494A4A4B4C4D4D4E4E4F4F4F><00010101010202020203030404050506070808090A0A0B0C0D0D0E0F10>0<8A89888786858484838281807F7E7D7C7B7A7978777776757473727170><A9A8A7A6A5A4A3A2A1A09F9E9D9C9B999897969594939291908F8E8D8C>4 %_Br<BCBCBDBDBDBEBEBFBFBFC0C0C1C1C2C2C2C3C3C3C4C4C4C5C6C6C6C7C7C8C8C9C9CACACBCBCCCCCCCCCDCDCECECFCF><0D0F1111131416181A1A1B1D1F212222242628292B2B2D2E303231333537393B3A3C3E404243434546484A4B4B4D4F><1313141616171718191B1B1C1C1D1D20202121222325252628292B2B2C2C2D2E2F30313132333535363737383A3B3B><0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000>0<B0AFAEAEADACABAAA9A9A8A7A6A5A4A4A3A2A1A09F9F9E9D9C9B9B9A9998979696959493929191908F8E8D8C8C8B8A><D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9>4 %_Br<838485858687878889898A8B8B8C8D8D8E8E8F909091929293939495959697979898999A9A9B9C9C9D9D9E9E9F9FA0A0A1A1A2A2A3A3A4A4A4A5A6A6A6A7A8A8A9AAAAAAABACACACACADADAEAEAFAFAFB0B0B0B1B1B2B2B2B2B3B3B4B4B4B4B5B5B5B5B6B6B6B7B7B7B8B8B8B8B9B9B9B9B9B9BABABABABABABBBBBBBBBCBC><0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000101010003020202040404030505050507070707090908080A0A0A0A0C0C0B0B0D0D><11111010121211111112111113131212121212121314131313131213141514141414131315151414141513141616141515151414161615151515141416161515151414161615151515141416161515151514141616151515151414161615151515131415151414141413131515141414141313141413131313121214141313>0<7F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100><D0D0CFCFCFCFCECECECECDCDCDCDCCCCCCCCCBCBCBCBCACACACAC9C9C9C9C8C8C8C8C7C7C7C7C6C6C6C6C5C5C5C5C4C4C4C4C3C3C3C3C2C2C2C2C1C1C1C1C0C0C0BFBFBFBFBEBEBEBEBDBDBDBDBCBCBCBCBBBBBBBBBABABABAB9B9B9B9B8B8B8B8B7B7B7B7B6B6B6B6B5B5B5B5B4B4B4B4B3B3B3B3B2B2B2B2B1B1B1B1B0B0><E8E8E8E8E7E7E7E7E7E7E7E7E6E6E6E6E6E6E6E6E5E5E5E5E5E5E5E5E4E4E4E4E4E4E4E4E3E3E3E3E3E3E3E3E2E2E2E2E2E2E2E2E1E1E1E1E1E1E1E1E0E0E0E0E0E0E0DFDFDFDFDFDFDFDFDEDEDEDEDEDEDEDEDDDDDDDDDDDDDDDDDCDCDCDCDCDCDCDCDBDBDBDBDBDBDBDBDADADADADADADADAD9D9D9D9D9D9D9D9D8D8D8D8>4 %_Br<0000010304050708090A0C0D0E10111213151617181A1B1C1D1E1F202223242627292A2B2C2D2E2F3031333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5D5F606061626364656767686A6A6B6C6D6E6F7071727273747576777778797A7B7B7C7D7E7F7F8081828283>0<00000000010001000002010202010302030302020403040403030404040304050505060505060607060608070706070708080807070908090808080909090909090A0A09090A0A0B0B0A0A090B0C0B0B0B0C0C0D0C0C0B0D0E0D0D0D0E0E0D0D0E0C0F0F0E0E0E0F0F0E0F0F0E10100F0F100F111010100F111110100F10121011>0<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F><FFFFFEFEFEFDFDFCFCFCFBFBFBFAFAF9F9F9F8F8F8F7F7F7F6F6F5F5F5F4F4F4F3F3F3F2F2F1F1F1F0F0F0EFEFEEEEEEEDEDEDECECECEBEBEAEAEAE9E9E9E8E8E8E7E7E6E6E6E5E5E5E4E4E3E3E3E2E2E2E1E1E1E0E0DFDFDFDEDEDEDDDDDCDCDCDBDBDBDADADAD9D9D8D8D8D7D7D7D6D6D6D5D5D4D4D4D3D3D3D2D2D1D1D1D0D0><FFFFFFFEFEFEFEFEFEFDFDFDFDFDFCFCFCFCFCFCFBFBFBFBFBFBFAFAFAFAFAF9F9F9F9F9F9F8F8F8F8F8F7F7F7F7F7F7F6F6F6F6F6F5F5F5F5F5F5F4F4F4F4F4F4F3F3F3F3F3F2F2F2F2F2F2F1F1F1F1F1F0F0F0F0F0F0EFEFEFEFEFEEEEEEEEEEEEEDEDEDEDEDECECECECECECEBEBEBEBEBEBEAEAEAEAEAE9E9E9E9E9E9E8E8E8>4 %_Br[0.864317 0.455451 0.311345 0.06186 0 0.439216 0.54902 2 50 98.8764 %_BS%_0.864317 0.455451 0.311345 0.06186 0 0.439216 0.54902 2 50 98.8764 Bs0.813107 0.308721 0.233066 0.001404 0 0.541176 0.662745 2 50 77.5281 %_BS%_0.813107 0.308721 0.233066 0.001404 0 0.541176 0.662745 2 50 77.5281 Bs0.736446 0.052583 0.073213 0 0 0.690196 0.847059 2 50 52.2472 %_BS%_0.736446 0.052583 0.073213 0 0 0.690196 0.847059 2 50 52.2472 Bs0.514183 0 0.065278 0 0.498039 0.815686 0.909804 2 50 51.6854 %_BS%_0.514183 0 0.065278 0 0.498039 0.815686 0.909804 2 50 51.6854 Bs0 0 0 0 1 1 1 2 50 0 %_BS%_0 0 0 0 1 1 1 2 50 0 BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI3_BeginPattern: (Rautenw\637rfel)(Rautenw\637rfel) 6.5605 11.3652 85.3018 79.5596 [%AI3_Tile(0 O 0 R 0.21146 0.191348 0.288304 0 0.827451 0.792157 0.717647 Xa 0.21146 0.191348 0.288304 0 0.827451 0.792157 0.717647 XA) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR45.9316 56.8281 m39.3691 45.4609 L26.2471 45.4609 L32.8066 56.8281 L45.9316 56.8281 Lf45.9316 34.0957 m39.3691 22.7305 L26.2471 22.7305 L32.8066 34.0957 L45.9316 34.0957 Lf65.6162 22.7305 m59.0537 11.3652 L45.9316 11.3652 L52.4932 22.7305 L65.6162 22.7305 Lf65.6162 45.4609 m59.0537 34.0977 L45.9316 34.0977 L52.4932 45.4609 L65.6162 45.4609 Lf26.2471 22.7305 m19.6846 11.3652 L6.5605 11.3652 L13.123 22.7305 L26.2471 22.7305 Lf26.2471 45.4609 m19.6846 34.0977 L6.5605 34.0977 L13.123 45.4609 L26.2471 45.4609 Lf45.9316 79.5586 m39.3691 68.1924 L26.2471 68.1924 L32.8066 79.5586 L45.9316 79.5586 Lf65.6162 68.1934 m59.0537 56.8281 L45.9316 56.8281 L52.4932 68.1924 L65.6162 68.1934 Lf85.3018 56.8281 m78.7402 45.4609 L65.6162 45.4609 L72.1777 56.8281 L85.3018 56.8281 Lf85.3018 34.0957 m78.7402 22.7305 L65.6162 22.7305 L72.1777 34.0957 L85.3018 34.0957 Lf85.3018 79.5586 m78.7402 68.1924 L65.6162 68.1924 L72.1777 79.5586 L85.3018 79.5586 Lf26.2471 68.1924 m19.6846 56.8281 L6.5605 56.8281 L13.123 68.1924 L26.2471 68.1924 Lf%AI6_EndPatternLayer) &(0 O 0 R 0.514214 0.38996 0.20618 0.000336 0.54902 0.584314 0.67451 Xa 0.514214 0.38996 0.20618 0.000336 0.54902 0.584314 0.67451 XA) @(%AI6_BeginPatternLayer0 J 0 j 1 w 4 M []0 d0 XR26.2471 68.1924 m19.6846 56.8281 L26.2471 45.4609 L32.8066 56.8281 L26.2471 68.1924 Lf26.2471 45.4609 m19.6846 34.0957 L26.2471 22.7305 L32.8066 34.0957 L26.2471 45.4609 Lf26.2471 22.7305 m19.6846 11.3652 L26.2471 0 L32.8066 11.3652 L26.2471 22.7305 Lf45.9316 34.0957 m39.3691 22.7305 L45.9316 11.3652 L52.4932 22.7305 L45.9316 34.0957 Lf45.9316 56.8281 m39.3691 45.4609 L45.9316 34.0977 L52.4932 45.4609 L45.9316 56.8281 Lf6.5605 34.0957 m0 22.7305 L6.5605 11.3652 L13.123 22.7305 L6.5605 34.0957 Lf6.5605 56.8281 m0 45.4609 L6.5605 34.0977 L13.123 45.4609 L6.5605 56.8281 Lf26.2471 90.9238 m19.6846 79.5586 L26.2471 68.1924 L32.8066 79.5586 L26.2471 90.9238 Lf45.9316 79.5586 m39.3691 68.1924 L45.9316 56.8281 L52.4932 68.1924 L45.9316 79.5586 Lf65.6162 68.1924 m59.0537 56.8281 L65.6162 45.4609 L72.1777 56.8281 L65.6162 68.1924 Lf65.6162 45.4609 m59.0537 34.0957 L65.6162 22.7305 L72.1777 34.0957 L65.6162 45.4609 Lf65.6162 22.7305 m59.0537 11.3652 L65.6162 0 L72.1777 11.3652 L65.6162 22.7305 Lf85.3018 34.0957 m78.7402 22.7305 L85.3018 11.3652 L91.8643 22.7305 L85.3018 34.0957 Lf85.3018 56.8281 m78.7402 45.4609 L85.3018 34.0977 L91.8643 45.4609 L85.3018 56.8281 Lf65.6162 90.9238 m59.0537 79.5586 L65.6162 68.1924 L72.1777 79.5586 L65.6162 90.9238 Lf85.3018 79.5586 m78.7402 68.1924 L85.3018 56.8281 L91.8643 68.1924 L85.3018 79.5586 Lf6.5605 79.5576 m0 68.1924 L6.5605 56.8281 L13.123 68.1924 L6.5605 79.5576 Lf%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginBrushPattern(Unnamed Brush Pat)0 Au0 J 0 j 1 w 4 M []0 d0 XR-7791 7891 m-7611.6558 7891 L-7611.6558 7855.8271 L-7791 7855.8271 L-7791 7891 Lnuu0 O0 0.480903 0.908049 0 0.972549 0.603922 0.109804 Xa0 R0.730129 0.711116 0.636835 0.762051 0.137255 0.121569 0.12549 XA0.5 w-7629.8286 7856.0781 m-7772.8276 7856.0781 L-7772.8276 7858.6475 L-7629.8286 7858.6475 L-7629.8286 7856.0781 Lb-7772.8276 7881.4829 m-7629.8286 7881.4829 L-7629.8286 7878.7109 L-7772.8276 7878.7109 L-7772.8276 7881.4829 Lb0 0 0 0 1 1 1 Xa-7772.8276 7858.6475 m-7772.8276 7878.7109 L-7629.8286 7878.7109 L-7629.8286 7858.6475 L-7772.8276 7858.6475 LbU0 0.480903 0.908049 0 0.972549 0.603922 0.109804 Xa-7651.1978 7890.6191 m-7612.2544 7890.6191 L-7614.4292 7888.3984 L-7645.9976 7888.3984 L-7651.1978 7890.6191 Lb-7612.2544 7866.5854 m-7629.8286 7866.5854 L-7629.8286 7868.6797 L-7614.3237 7868.6797 L-7612.2544 7866.5854 Lb0 0 0 0 1 1 1 Xa-7614.3237 7868.6797 m-7629.8286 7868.6797 L-7629.8286 7881.4829 L-7645.9976 7888.3984 L-7614.4292 7888.3984 L-7624.6465 7879.1279 L-7614.3237 7868.6797 Lb0 0.480903 0.908049 0 0.972549 0.603922 0.109804 Xa-7790.4019 7890.6191 m-7751.4595 7890.6191 L-7756.6587 7888.3984 L-7788.2285 7888.3984 L-7790.4019 7890.6191 Lb0 0 0 0 1 1 1 Xa-7772.8286 7868.6797 m-7788.3345 7868.6797 L-7778.0112 7879.1279 L-7788.2285 7888.3984 L-7756.6587 7888.3984 L-7772.8286 7881.4829 L-7772.8286 7868.6797 Lb0 0.480903 0.908049 0 0.972549 0.603922 0.109804 Xa-7772.8286 7866.5854 m-7790.4019 7866.5854 L-7788.3345 7868.6797 L-7772.8286 7868.6797 L-7772.8286 7866.5854 Lb-7751.4595 7890.6191 m-7772.8286 7881.4829 LSu0 O0.730129 0.711116 0.636835 0.762051 0.137255 0.121569 0.12549 Xa-7651.1978 7881.4829 m-7651.1978 7888.1836 L-7635.5269 7881.4829 L-7651.1978 7881.4829 Lb0 0.480903 0.908049 0 0.972549 0.603922 0.109804 Xa-7651.1978 7888.1836 m-7651.1978 7890.6191 L-7629.8286 7881.4829 L-7635.5269 7881.4829 L-7651.1978 7888.1836 Lb-7772.8286 7881.4829 m-7751.4595 7890.6191 L-7751.4595 7888.1836 L-7767.1294 7881.4829 L-7772.8286 7881.4829 Lb0.730129 0.711116 0.636835 0.762051 0.137255 0.121569 0.12549 Xa-7767.1294 7881.4829 m-7751.4595 7888.1836 L-7751.4595 7881.4829 L-7767.1294 7881.4829 LbUUU%AI8_EndBrushPattern%AI8_BeginBrushPattern(Unnamed Brush Pat 44)0 Au1 Ap0 J 0 j 1 w 4 M []0 d1 XR-7786.6665 7891 m-7791 7891 L-7791 7887.3989 L-7786.6665 7887.3989 L-7786.6665 7891 Lnu0 Ap0 XR-7789.9702 7890.3359 m-7787.6963 7890.3359 L-7787.6963 7888.0625 L-7789.9702 7888.0625 L-7789.9702 7890.3359 Ln1 Ap0 O0.730129 0.711116 0.636835 0.762051 0.137255 0.121569 0.12549 Xa1 XR-7787.6963 7889.1992 m-7787.6963 7889.8262 -7788.2056 7890.3359 -7788.8335 7890.3359 c-7789.4614 7890.3359 -7789.9702 7889.8262 -7789.9702 7889.1992 c-7789.9702 7888.5718 -7789.4614 7888.0625 -7788.8335 7888.0625 c-7788.2056 7888.0625 -7787.6963 7888.5718 -7787.6963 7889.1992 cfUU%AI8_EndBrushPattern%AI8_BeginBrushPattern(Unnamed Brush Pat 47)0 Au0 Ap0 J 0 j 1 w 4 M []0 d1 XR-7784.6064 7891 m-7791 7891 L-7791 7887.3989 L-7784.6064 7887.3989 L-7784.6064 7891 Lnu0 XR-7788.9404 7890.3359 m-7786.6665 7890.3359 L-7786.6665 7888.0625 L-7788.9404 7888.0625 L-7788.9404 7890.3359 Ln1 Ap0 O0.730129 0.711116 0.636835 0.762051 0.137255 0.121569 0.12549 Xa1 XR-7786.6665 7889.1992 m-7786.6665 7889.8262 -7787.1753 7890.3359 -7787.8032 7890.3359 c-7788.4312 7890.3359 -7788.9404 7889.8262 -7788.9404 7889.1992 c-7788.9404 7888.5718 -7788.4312 7888.0625 -7787.8032 7888.0625 c-7787.1753 7888.0625 -7786.6665 7888.5718 -7786.6665 7889.1992 cfUU%AI8_EndBrushPattern%AI8_BeginBrushPattern(Unnamed Brush Pat 48)0 Au0 Ap0 J 0 j 1 w 4 M []0 d0 XR-7791 7891 m-7783.1465 7891 L-7783.1465 7882.5957 L-7791 7882.5957 L-7791 7891 Lnu0 O0.730129 0.711116 0.636835 0.762051 0.137255 0.121569 0.12549 Xa3.86371 M-7790.1582 7882.5957 m-7789.6812 7882.5845 -7789.2842 7882.9595 -7789.2725 7883.4375 c-7789.2593 7883.9141 -7789.6357 7884.3101 -7790.1138 7884.3237 c-7790.5903 7884.3359 -7790.9878 7883.96 -7790.9995 7883.4824 c-7791.0122 7883.0054 -7790.6357 7882.6069 -7790.1582 7882.5957 cf-7790.1357 7883.46 mFUu-7790.1558 7884.8184 m-7789.6782 7884.8086 -7789.2813 7885.1846 -7789.2686 7885.6621 c-7789.2563 7886.1382 -7789.6333 7886.5356 -7790.1104 7886.5488 c-7790.5874 7886.5615 -7790.9849 7886.1846 -7790.9971 7885.7075 c-7791.0093 7885.23 -7790.6328 7884.8345 -7790.1558 7884.8184 cf-7790.1333 7885.6846 mFUu-7790.1523 7887.0469 m-7789.6753 7887.0342 -7789.2783 7887.4102 -7789.2661 7887.8877 c-7789.2539 7888.3638 -7789.6304 7888.7612 -7790.1074 7888.7744 c-7790.5845 7888.7871 -7790.9814 7888.4102 -7790.9937 7887.9326 c-7791.0068 7887.4556 -7790.6299 7887.0581 -7790.1523 7887.0469 cf-7790.1299 7887.9102 mFUu-7790.1499 7889.2725 m-7789.6724 7889.2588 -7789.2754 7889.6357 -7789.2627 7890.1133 c-7789.25 7890.5894 -7789.6274 7890.9863 -7790.1045 7891 c-7790.5815 7891.0127 -7790.9785 7890.6357 -7790.9912 7890.1582 c-7791.0029 7889.6816 -7790.6274 7889.2832 -7790.1499 7889.2725 cf-7790.1274 7890.1357 mFUu-7788.1538 7883.6665 m-7787.6763 7883.6533 -7787.2793 7884.0293 -7787.2666 7884.5068 c-7787.2539 7884.9829 -7787.6309 7885.3804 -7788.1084 7885.3945 c-7788.5854 7885.4063 -7788.9824 7885.0293 -7788.9946 7884.5527 c-7789.0068 7884.0752 -7788.6304 7883.6768 -7788.1538 7883.6665 cf-7788.1304 7884.5293 mFUu-7788.1499 7885.8901 m-7787.6729 7885.8789 -7787.2764 7886.2549 -7787.2632 7886.7324 c-7787.2515 7887.21 -7787.6274 7887.6069 -7788.1055 7887.6191 c-7788.5825 7887.6318 -7788.9795 7887.2549 -7788.9917 7886.7773 c-7789.0039 7886.3008 -7788.6274 7885.9023 -7788.1499 7885.8901 cf-7788.1274 7886.7549 mFUu-7788.1475 7888.1157 m-7787.6699 7888.1045 -7787.2729 7888.4805 -7787.2607 7888.9595 c-7787.2485 7889.4341 -7787.6255 7889.8325 -7788.1025 7889.8447 c-7788.5791 7889.8574 -7788.9766 7889.4814 -7788.9888 7889.0029 c-7789.0015 7888.5264 -7788.6245 7888.1279 -7788.1475 7888.1157 cf-7788.1245 7888.9805 mFUu-7786.0723 7884.7119 m-7785.5952 7884.6997 -7785.1987 7885.0781 -7785.1865 7885.5532 c-7785.1738 7886.0303 -7785.5508 7886.4287 -7786.0273 7886.4414 c-7786.5054 7886.4541 -7786.9019 7886.0757 -7786.9141 7885.5996 c-7786.9272 7885.1235 -7786.5498 7884.7261 -7786.0723 7884.7119 cf-7786.0503 7885.5781 mFUu-7786.0698 7886.9395 m-7785.5928 7886.9253 -7785.1953 7887.3013 -7785.1831 7887.7788 c-7785.1704 7888.2573 -7785.5474 7888.6543 -7786.0249 7888.6685 c-7786.5024 7888.6797 -7786.8994 7888.3013 -7786.9116 7887.8252 c-7786.9233 7887.3486 -7786.5469 7886.9512 -7786.0698 7886.9395 cf-7786.0474 7887.8013 mFUu-7784.0332 7885.7822 m-7783.5557 7885.7695 -7783.1592 7886.1475 -7783.1465 7886.6255 c-7783.1333 7887.1016 -7783.5103 7887.4985 -7783.9883 7887.5117 c-7784.4653 7887.5225 -7784.8618 7887.1475 -7784.8745 7886.6685 c-7784.8862 7886.1909 -7784.5098 7885.7949 -7784.0332 7885.7822 cf-7784.0103 7886.6475 mFUU%AI8_EndBrushPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginPluginObject(Adobe Brush Manager Order)(Adobe Brush Manager Order)( Adobe Calligraphic Brush Tool/ Oval - 2 Pt./ Adobe Calligraph) -(ic Brush Tool/ Oval - 5 Pt./ Adobe Calligraphic Brush Tool/ Fl) -(ach - 5 Pt./ Adobe Calligraphic Brush Tool/ Rund - 3 Pt./ Adob) -(e Calligraphic Brush Tool/ Rund - 7 Pt./ Adobe Calligraphic Br) -(ush Tool/ Rund - 15 Pt./ Adobe ArtOnPath Brush Tool/ Banner/ A) -(dobe PatternOnPath Brush Tool/ Pfeilpinsel Kreise/) .%AI8_EndPluginObject%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginPluginObject(Adobe Calligraphic Brush Tool)(Flach - 5 Pt.)(1 5 5 0 0 90 90 0 0 0 0) .%AI8_EndPluginObject%AI8_BeginPluginObject(Adobe Calligraphic Brush Tool)(Oval - 2 Pt.)(1 2 2 26 74 15 15 0 1 0 0) .%AI8_EndPluginObject%AI8_BeginPluginObject(Adobe Calligraphic Brush Tool)(Oval - 5 Pt.)(1 5 5 10 90 -65 35 0 1 1 0) .%AI8_EndPluginObject%AI8_BeginPluginObject(Adobe Calligraphic Brush Tool)(Rund - 15 Pt.)(1 15 15 100 100 15 15 0 0 0 0) .%AI8_EndPluginObject%AI8_BeginPluginObject(Adobe Calligraphic Brush Tool)(Rund - 3 Pt.)(1 3 3 100 100 0 0 0 0 0 0) .%AI8_EndPluginObject%AI8_BeginPluginObject(Adobe Calligraphic Brush Tool)(Rund - 7 Pt.)(1 7 7 100 100 0 0 0 0 0 0) .%AI8_EndPluginObject%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginPluginObject(Adobe ArtOnPath Brush Tool)(Banner)(1 / Unnamed Brush Pat/ / / / / 0 0 /  1 0 1 0 1 0 0 0) .%AI8_EndPluginObject%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_BeginPluginObject(Adobe PatternOnPath Brush Tool)(Pfeilpinsel Kreise)(1 / Unnamed Brush Pat 44/ Unnamed Brush Pat 44/ Unnamed Brush ) -(Pat 44/ Unnamed Brush Pat 48/ Unnamed Brush Pat 47/ 0 1 /  1 3) -( 1 0 4 0 0 0) .%AI8_EndPluginObject%AI5_End_NonPrinting--%AI5_BeginPalette0 0 Pb0.860075 0.849699 0.789548 1 ([Passermarken]) 0 Xs([Passermarken])Pc0 0 0 0 1 1 1 Xa(Wei\647)Pc0.860075 0.849699 0.789548 1 0 0 0 Xa(Schwarz)Pc0 0.946532 0.937133 0 1 0 0 Xa(RGB Rot)Pc0.093996 0 0.934234 0 1 1 0 Xa(RGB Gelb)Pc0.65771 0 1 0 0 1 0 Xa(RGB Gr\637n)Pc0.570947 0 0.134524 0 0 1 1 Xa(RGB Cyan)Pc0.88397 0.770108 0 0 0 0 1 Xa(RGB Blau)Pc0.333318 0.780392 0 0 1 0 1 Xa(RGB Magenta)Pc0.172732 0.941985 0.855985 0.066896 0.756863 0.152941 0.176471 Xa(R=193 G=39 B=45)Pc0 0.941375 0.888029 0.000427 0.929412 0.109804 0.141176 Xa(R=237 G=28 B=36)Pc0 0.761349 0.885496 0 0.945098 0.352941 0.141176 Xa(R=241 G=90 B=36)Pc0 0.515129 0.911498 0 0.968627 0.576471 0.117647 Xa(R=247 G=147 B=30)Pc0 0.374578 0.819669 0 0.984314 0.690196 0.231373 Xa(R=251 G=176 B=59)Pc0.072328 0 0.857542 0 0.988235 0.933333 0.129412 Xa(R=252 G=238 B=33)Pc0.23209 0 0.885466 0 0.85098 0.878431 0.129412 Xa(R=217 G=224 B=33)Pc0.527031 0 0.869627 0 0.54902 0.776471 0.247059 Xa(R=140 G=198 B=63)Pc0.727108 0 0.858396 0 0.223529 0.709804 0.290196 Xa(R=57 G=181 B=74)Pc0.83682 0.129335 0.891264 0.009308 0 0.572549 0.270588 Xa(R=0 G=146 B=69)Pc0.873808 0.33756 0.901701 0.230381 0 0.407843 0.215686 Xa(R=0 G=104 B=55)Pc0.746395 0 0.675746 0 0.133333 0.709804 0.45098 Xa(R=34 G=181 B=115)Pc0.771084 0.031861 0.432563 0 0 0.662745 0.615686 Xa(R=0 G=169 B=157)Pc0.708766 0.140078 0 0 0.160784 0.670588 0.886275 Xa(R=41 G=171 B=226)Pc0.850248 0.514549 0 0 0 0.443137 0.737255 Xa(R=0 G=113 B=188)Pc0.918883 0.910094 0 0 0.180392 0.192157 0.572549 Xa(R=46 G=49 B=146)Pc0.961028 1 0.328832 0.193606 0.105882 0.078431 0.392157 Xa(R=27 G=20 B=100)Pc0.736324 0.927306 0 0 0.4 0.176471 0.568627 Xa(R=102 G=45 B=145)Pc0.52639 0.925505 0 0 0.576471 0.152941 0.560784 Xa(R=147 G=39 B=143)Pc0.386297 1 0.303502 0.083284 0.619608 0 0.364706 Xa(R=158 G=0 B=93)Pc0.106966 0.96817 0.419379 0.00238 0.831373 0.078431 0.352941 Xa(R=212 G=20 B=90)Pc0 0.919432 0.132479 0 0.929412 0.117647 0.47451 Xa(R=237 G=30 B=121)Pc0.262242 0.302037 0.399054 0 0.780392 0.698039 0.6 Xa(R=199 G=178 B=153)Pc0.439338 0.446723 0.498695 0.064942 0.6 0.52549 0.458824 Xa(R=153 G=134 B=117)Pc0.535302 0.536828 0.574395 0.238621 0.45098 0.388235 0.341176 Xa(R=115 G=99 B=87)Pc0.607416 0.6065 0.609216 0.432685 0.32549 0.278431 0.254902 Xa(R=83 G=71 B=65)Pc0.258213 0.406836 0.59823 0.012848 0.776471 0.611765 0.427451 Xa(R=198 G=156 B=109)Pc0.351843 0.50103 0.68777 0.103639 0.65098 0.486275 0.321569 Xa(R=166 G=124 B=82)Pc0.396582 0.569543 0.79736 0.242313 0.54902 0.384314 0.223529 Xa(R=140 G=98 B=57)Pc0.423621 0.629786 0.910674 0.384833 0.458824 0.298039 0.141176 Xa(R=117 G=76 B=36)Pc0.437263 0.693172 1 0.51931 0.376471 0.219608 0.07451 Xa(R=96 G=56 B=19)Pc0.484901 0.764309 0.952666 0.7131 0.258824 0.129412 0.043137 Xa(R=66 G=33 B=11)PcBb2 (Schwarz\637bergang zu Kante) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(Schwarz\637bergang zu Kante)PcBb0 0 0 0 Bh2 (Neonring-Vignette) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(Neonring-Vignette)PcBb2 (Wasser) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(Wasser)PcBb0 0 0 0 Bh2 (Rosa radial) 0 0 0 1 1 0 0 1 0 0 Bg0 BB(Rosa radial)Pc(Rautenw\637rfel) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p(Rautenw\637rfel)Pc0.917449 0.648829 0.072816 0.005768 0 0.352941 0.607843 (C=100 M=50 Y=0 K=20) 0 1 Xk(C=100 M=50 Y=0 K=20)Pc0.860075 0.849699 0.789548 1 0 0 0 Xa(R=0 G=0 B=0)Pc0.764248 0.711086 0.666407 0.817105 0.101961 0.101961 0.101961 Xa(R=26 G=26 B=26)Pc0.719417 0.643305 0.604028 0.583947 0.2 0.2 0.2 Xa(R=51 G=51 B=51)Pc0.671046 0.585412 0.545952 0.371466 0.301961 0.301961 0.301961 Xa(R=77 G=77 B=77)Pc0.616083 0.521294 0.485847 0.198123 0.4 0.4 0.4 Xa(R=102 G=102 B=102)Pc0.54519 0.449836 0.416358 0.06836 0.501961 0.501961 0.501961 Xa(R=128 G=128 B=128)Pc0.4654 0.370703 0.345861 0.006714 0.6 0.6 0.6 Xa(R=153 G=153 B=153)Pc0.349218 0.270603 0.25153 0 0.701961 0.701961 0.701961 Xa(R=179 G=179 B=179)Pc0.239963 0.176791 0.171603 0 0.8 0.8 0.8 Xa(R=204 G=204 B=204)Pc0.119783 0.085969 0.080659 0 0.901961 0.901961 0.901961 Xa(R=230 G=230 B=230)Pc0.058961 0.042023 0.040009 0 0.94902 0.94902 0.94902 Xa(R=242 G=242 B=242)Pc0.655116 0.236484 0 0 0.247059 0.662745 0.960784 Xa(R=63 G=169 B=245)Pc0.575433 0 0.86218 0 0.478431 0.788235 0.262745 Xa(R=122 G=201 B=67)Pc0 0.522942 0.883574 0 1 0.576471 0.117647 Xa(R=255 G=147 B=30)Pc0 0.91931 0.801602 0 1 0.113725 0.145098 Xa(R=255 G=29 B=37)Pc0 0.65301 0.01297 0 1 0.482353 0.67451 Xa(R=255 G=123 B=172)Pc0.305882 0.146853 0.127047 0 0.741176 0.8 0.831373 Xa(R=189 G=204 B=212)PcPB%AI5_EndPalette%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 1 0 79 128 255 0 50 Lb(Ebene 1) Ln0 Auu*u0 O0.917449 0.648829 0.072816 0.005768 0 0.352941 0.607843 (C=100 M=50 Y=0 K=20) 0 1 Xk0 J 0 j 1 w 10 M []0 d0 XR360.1367 -323.4473 m360.1367 -327.8428 L365.7754 -327.8428 L365.7754 -329.3428 L360.1367 -329.3428 L360.1367 -336.0049 L358.6387 -336.0049 L358.6387 -321.9482 L366.2285 -321.9482 L366.2285 -323.4473 L360.1367 -323.4473 lf*U*u375.1953 -336.0049 m373.6992 -336.0049 L373.6992 -335.0186 L373.2461 -335.6895 372.1221 -336.1826 370.959 -336.1826 c369.2637 -336.1826 367.5098 -335.1777 367.5098 -332.8105 c367.5098 -330.8779 368.9297 -329.874 370.8213 -329.874 c373.6992 -329.874 L373.6992 -328.8877 L373.6992 -327.3701 372.792 -326.9355 371.5703 -326.9355 c370.4453 -326.9355 369.4404 -327.4287 369.3809 -328.8486 c367.9023 -328.8486 L367.9824 -326.3848 369.9941 -325.4766 371.5498 -325.4766 c373.3242 -325.4766 375.1953 -326.3447 375.1953 -328.8291 C375.1953 -336.0049 lf1 D373.6992 -331.2734 m370.8604 -331.2734 L369.7363 -331.2734 368.9873 -331.7061 368.9873 -332.8105 c368.9873 -334.3496 370.1113 -334.7041 371.1953 -334.7041 c372.4375 -334.7041 373.6992 -333.8955 373.6992 -332.4756 C373.6992 -331.2734 lf*U*u0 D383.793 -336.0049 m380.6602 -331.0771 L379.1406 -332.7314 L379.1406 -336.0049 L377.6426 -336.0049 L377.6426 -321.8125 L379.1406 -321.8125 L379.1406 -330.6426 L383.6758 -325.6357 L385.627 -325.6357 L381.625 -329.9922 L385.5469 -336.0049 L383.793 -336.0049 lf*U*u393.5615 -336.0049 m393.5615 -335.1963 L393.0898 -335.8086 392.1025 -336.1826 391.2168 -336.1826 c388.8691 -336.1826 387.3916 -334.7432 387.3916 -332.457 c387.3916 -325.6357 L388.8896 -325.6357 L388.8896 -332.457 L388.8896 -333.4805 389.3037 -334.7041 391.2168 -334.7041 c392.5957 -334.7041 393.5615 -333.875 393.5615 -332.5547 c393.5615 -325.6357 L395.0605 -325.6357 L395.0605 -336.0049 L393.5615 -336.0049 lf*U*u397.5117 -321.8125 m399.0098 -321.8125 L399.0098 -333.4014 L399.0098 -334.2695 399.5029 -334.5449 400.0938 -334.5449 c400.5674 -334.5449 L400.5674 -336.0049 L399.9951 -336.0049 L398.6348 -336.0049 397.5117 -335.2354 397.5117 -333.3242 C397.5117 -321.8125 lf*U*u400.9434 -325.6543 m402.916 -325.6543 L402.916 -321.9482 L404.3926 -321.9482 L404.3926 -325.6543 L406.6602 -325.6543 L406.6602 -327.1348 L404.3926 -327.1348 L404.3926 -333.4014 L404.3926 -334.2695 404.9053 -334.5449 405.4766 -334.5449 c406.6992 -334.5449 L406.6992 -336.0049 L405.3994 -336.0049 L404.0186 -336.0049 402.916 -335.2354 402.916 -333.3242 c402.916 -327.1348 L400.9434 -327.1348 L400.9434 -325.6543 lf*U*u416.0156 -336.0049 m414.5176 -336.0049 L414.5176 -335.0186 L414.0635 -335.6895 412.9414 -336.1826 411.7773 -336.1826 c410.0811 -336.1826 408.3271 -335.1777 408.3271 -332.8105 c408.3271 -330.8779 409.7461 -329.874 411.6396 -329.874 c414.5176 -329.874 L414.5176 -328.8877 L414.5176 -327.3701 413.6104 -326.9355 412.3887 -326.9355 c411.2637 -326.9355 410.2598 -327.4287 410.1992 -328.8486 c408.7207 -328.8486 L408.8008 -326.3848 410.8105 -325.4766 412.3691 -325.4766 c414.1426 -325.4766 416.0156 -326.3447 416.0156 -328.8291 C416.0156 -336.0049 lf409.4512 -323.5664 m409.4512 -321.418 L411.2637 -321.418 L411.2637 -323.5664 L409.4512 -323.5664 lf1 D414.5176 -331.2734 m411.6787 -331.2734 L410.5547 -331.2734 409.8057 -331.7061 409.8057 -332.8105 c409.8057 -334.3496 410.9297 -334.7041 412.0137 -334.7041 c413.2559 -334.7041 414.5176 -333.8955 414.5176 -332.4756 C414.5176 -331.2734 lf0 D413.4922 -323.5664 m413.4922 -321.418 L415.3066 -321.418 L415.3066 -323.5664 L413.4922 -323.5664 lf*U*u417.5938 -325.6543 m419.5664 -325.6543 L419.5664 -321.9482 L421.0439 -321.9482 L421.0439 -325.6543 L423.3105 -325.6543 L423.3105 -327.1348 L421.0439 -327.1348 L421.0439 -333.4014 L421.0439 -334.2695 421.5566 -334.5449 422.1289 -334.5449 c423.3506 -334.5449 L423.3506 -336.0049 L422.0508 -336.0049 L420.6699 -336.0049 419.5664 -335.2354 419.5664 -333.3242 c419.5664 -327.1348 L417.5938 -327.1348 L417.5938 -325.6543 lf*U*u431.6855 -327.1348 m431.6855 -336.0049 L430.207 -336.0049 L430.207 -327.1348 L428.4131 -327.1348 L428.4131 -325.6543 L430.207 -325.6543 L430.207 -324.8857 L430.207 -323.0918 431.0938 -321.9482 432.9873 -321.9482 c433.9131 -321.9482 L433.9131 -323.4072 L432.8105 -323.4072 L432.3164 -323.4072 431.6855 -323.6826 431.6855 -324.6504 c431.6855 -325.6543 L434.1309 -325.6543 L434.1309 -327.1348 L431.6855 -327.1348 lf*U*u442.0088 -336.0049 m442.0088 -335.1963 L441.5352 -335.8086 440.5488 -336.1826 439.6621 -336.1826 c437.3164 -336.1826 435.8379 -334.7432 435.8379 -332.457 c435.8379 -325.6357 L437.3359 -325.6357 L437.3359 -332.457 L437.3359 -333.4805 437.75 -334.7041 439.6621 -334.7041 c441.042 -334.7041 442.0088 -333.875 442.0088 -332.5547 c442.0088 -325.6357 L443.5059 -325.6357 L443.5059 -336.0049 L442.0088 -336.0049 lf436.6846 -323.5664 m436.6846 -321.418 L438.498 -321.418 L438.498 -323.5664 L436.6846 -323.5664 lf440.7256 -323.5664 m440.7256 -321.418 L442.5391 -321.418 L442.5391 -323.5664 L440.7256 -323.5664 lf*U*u449.3184 -327.1348 m448.5293 -327.1348 447.4844 -327.7246 447.4844 -329.4209 c447.4844 -336.0049 L446.0059 -336.0049 L446.0059 -325.6543 L447.4844 -325.6543 L447.4844 -326.6006 L447.9775 -325.9902 448.7471 -325.6543 449.3379 -325.6543 c450.166 -325.6543 L450.166 -327.1348 L449.3184 -327.1348 lf*U*u456.0977 -336.0049 m456.0977 -321.9482 L463.6855 -321.9482 L463.6855 -323.4473 L457.5947 -323.4473 L457.5947 -327.8232 L463.2334 -327.8232 L463.2334 -329.3232 L457.5947 -329.3232 L457.5947 -334.5244 L463.6855 -334.5244 L463.6855 -336.0049 L456.0977 -336.0049 lf*U*u465.6875 -321.8125 m467.1855 -321.8125 L467.1855 -333.4014 L467.1855 -334.2695 467.6787 -334.5449 468.2695 -334.5449 c468.7432 -334.5449 L468.7432 -336.0049 L468.1719 -336.0049 L466.8115 -336.0049 465.6875 -335.2354 465.6875 -333.3242 C465.6875 -321.8125 lf*U*u477.9404 -331.292 m471.6904 -331.292 L471.6904 -332.457 L471.6904 -333.4805 472.1641 -334.7246 474.0771 -334.7246 c475.416 -334.7246 476.2842 -333.9551 476.4219 -332.6143 c477.9199 -332.6143 L477.7432 -334.8027 476.2461 -336.2021 474.0771 -336.2021 c471.7305 -336.2021 470.1934 -334.7637 470.1934 -332.457 c470.1934 -329.2031 L470.1934 -326.9355 471.7695 -325.4766 474.0771 -325.4766 c476.4023 -325.4766 477.9404 -326.8984 477.9404 -329.2031 C477.9404 -331.292 lf1 D476.4424 -329.2031 m476.4424 -328.1582 475.9688 -326.9355 474.0771 -326.9355 c472.5977 -326.9355 471.6904 -327.7646 471.6904 -329.2031 c471.6904 -329.832 L476.4424 -329.832 L476.4424 -329.2031 lf*U*u0 D486.3242 -336.0049 m483.1895 -331.0771 L481.6719 -332.7314 L481.6719 -336.0049 L480.1738 -336.0049 L480.1738 -321.8125 L481.6719 -321.8125 L481.6719 -330.6426 L486.2051 -325.6357 L488.1582 -325.6357 L484.1563 -329.9922 L488.0781 -336.0049 L486.3242 -336.0049 lf*U*u489.3809 -325.6543 m491.3535 -325.6543 L491.3535 -321.9482 L492.832 -321.9482 L492.832 -325.6543 L495.0996 -325.6543 L495.0996 -327.1348 L492.832 -327.1348 L492.832 -333.4014 L492.832 -334.2695 493.3438 -334.5449 493.916 -334.5449 c495.1387 -334.5449 L495.1387 -336.0049 L493.8369 -336.0049 L492.457 -336.0049 491.3535 -335.2354 491.3535 -333.3242 c491.3535 -327.1348 L489.3809 -327.1348 L489.3809 -325.6543 lf*U*u500.4414 -327.1348 m499.6523 -327.1348 498.6084 -327.7246 498.6084 -329.4209 c498.6084 -336.0049 L497.1289 -336.0049 L497.1289 -325.6543 L498.6084 -325.6543 L498.6084 -326.6006 L499.1016 -325.9902 499.8691 -325.6543 500.4609 -325.6543 c501.2881 -325.6543 L501.2881 -327.1348 L500.4414 -327.1348 lf*U*u506.7109 -336.2021 m504.3652 -336.2021 502.8262 -334.7637 502.8262 -332.457 c502.8262 -329.2031 L502.8262 -326.9355 504.4043 -325.4766 506.7109 -325.4766 c509.0371 -325.4766 510.5742 -326.8984 510.5742 -329.2031 c510.5742 -332.457 l510.5742 -334.7246 508.9961 -336.2021 506.7109 -336.2021 cf1 D509.0762 -329.2031 m509.0762 -328.1582 508.6035 -326.9355 506.7109 -326.9355 c505.2324 -326.9355 504.3252 -327.7646 504.3252 -329.2031 c504.3252 -332.457 L504.3252 -333.4805 504.7988 -334.7246 506.7109 -334.7246 c508.168 -334.7246 509.0762 -333.875 509.0762 -332.457 C509.0762 -329.2031 lf*U*u0 D512.0313 -325.6543 m514.0039 -325.6543 L514.0039 -321.9482 L515.4824 -321.9482 L515.4824 -325.6543 L517.749 -325.6543 L517.749 -327.1348 L515.4824 -327.1348 L515.4824 -333.4014 L515.4824 -334.2695 515.9941 -334.5449 516.5664 -334.5449 c517.7891 -334.5449 L517.7891 -336.0049 L516.4883 -336.0049 L515.1074 -336.0049 514.0039 -335.2354 514.0039 -333.3242 c514.0039 -327.1348 L512.0313 -327.1348 L512.0313 -325.6543 lf*U*u527.2393 -331.292 m520.9912 -331.292 L520.9912 -332.457 L520.9912 -333.4805 521.4629 -334.7246 523.375 -334.7246 c524.7168 -334.7246 525.583 -333.9551 525.7217 -332.6143 c527.2197 -332.6143 L527.043 -334.8027 525.543 -336.2021 523.375 -336.2021 c521.0313 -336.2021 519.4922 -334.7637 519.4922 -332.457 c519.4922 -329.2031 L519.4922 -326.9355 521.0684 -325.4766 523.375 -325.4766 c525.7021 -325.4766 527.2393 -326.8984 527.2393 -329.2031 C527.2393 -331.292 lf1 D525.7412 -329.2031 m525.7412 -328.1582 525.2676 -326.9355 523.375 -326.9355 c521.8965 -326.9355 520.9912 -327.7646 520.9912 -329.2031 c520.9912 -329.832 L525.7412 -329.832 L525.7412 -329.2031 lf*U*u0 D537.0566 -329.084 m535.5576 -329.084 L535.4785 -328.0586 534.9082 -326.9355 533.2129 -326.9355 c531.7344 -326.9355 530.8262 -327.7646 530.8262 -329.2031 c530.8262 -332.457 L530.8262 -333.4805 531.2998 -334.7246 533.2129 -334.7246 c534.5527 -334.7246 535.4199 -333.9551 535.5576 -332.6143 c537.0566 -332.6143 L536.8789 -334.8027 535.3809 -336.2021 533.2129 -336.2021 c530.8652 -336.2021 529.3281 -334.7637 529.3281 -332.457 c529.3281 -329.2031 L529.3281 -326.9355 530.9063 -325.4766 533.2129 -325.4766 c535.4395 -325.4766 536.918 -326.8389 537.0566 -329.084 cf*U*u545.2363 -336.0049 m545.2363 -329.2031 L545.2363 -328.1777 545.0195 -326.9355 543.1074 -326.9355 c541.7266 -326.9355 540.584 -327.8428 540.584 -329.1631 c540.584 -336.0049 L539.1055 -336.0049 L539.1055 -321.9482 L540.584 -321.9482 L540.584 -326.6201 L541.0957 -325.8906 542.2188 -325.4766 543.1074 -325.4766 c545.4727 -325.4766 546.7148 -326.8789 546.7148 -329.2031 c546.7148 -336.0049 L545.2363 -336.0049 lf*U*u555.291 -336.0049 m555.291 -329.2031 L555.291 -328.1777 555.0742 -326.9355 553.1621 -326.9355 c551.7822 -326.9355 550.6387 -327.8428 550.6387 -329.1631 c550.6387 -336.0049 L549.1602 -336.0049 L549.1602 -325.6543 L550.6387 -325.6543 L550.6387 -326.6006 L551.1514 -325.8711 552.2559 -325.4766 553.1621 -325.4766 c555.5088 -325.4766 556.7695 -326.8789 556.7695 -329.2031 c556.7695 -336.0049 L555.291 -336.0049 lf*U*u559.0898 -323.9404 m559.0898 -321.8125 L560.9023 -321.8125 L560.9023 -323.9404 L559.0898 -323.9404 lf559.2676 -336.0049 m559.2676 -325.6357 L560.7461 -325.6357 L560.7461 -336.0049 L559.2676 -336.0049 lf*U*u569.4531 -336.0049 m566.3184 -331.0771 L564.8008 -332.7314 L564.8008 -336.0049 L563.3027 -336.0049 L563.3027 -321.8125 L564.8008 -321.8125 L564.8008 -330.6426 L569.3359 -325.6357 L571.2871 -325.6357 L567.2852 -329.9922 L571.209 -336.0049 L569.4531 -336.0049 lf*U*u364.7305 -351.6631 m364.7305 -350.8545 L364.2568 -351.4639 363.2715 -351.8379 362.3838 -351.8379 c360.0391 -351.8379 358.5605 -350.3994 358.5605 -348.1143 c358.5605 -341.2949 L360.0586 -341.2949 L360.0586 -348.1143 L360.0586 -349.1387 360.4717 -350.3604 362.3838 -350.3604 c363.7646 -350.3604 364.7305 -349.5342 364.7305 -348.2109 c364.7305 -341.2949 L366.2285 -341.2949 L366.2285 -351.6631 L364.7305 -351.6631 lf*U*u374.8594 -351.6631 m374.8594 -344.8613 L374.8594 -343.834 374.6426 -342.5938 372.7305 -342.5938 c371.3506 -342.5938 370.207 -343.5 370.207 -344.8213 c370.207 -351.6631 L368.7285 -351.6631 L368.7285 -341.3115 L370.207 -341.3115 L370.207 -342.2588 L370.7207 -341.5293 371.8242 -341.1357 372.7305 -341.1357 c375.0771 -341.1357 376.3379 -342.5342 376.3379 -344.8613 c376.3379 -351.6631 L374.8594 -351.6631 lf*U*u378.582 -344.8613 m378.582 -342.5537 380.0596 -341.1357 382.3867 -341.1357 c383.292 -341.1357 384.2207 -341.4902 384.7129 -342.1602 c384.7129 -337.6064 L386.21 -337.6064 L386.21 -351.6631 L384.7129 -351.6631 L384.7129 -350.8545 L384.3184 -351.4443 383.2539 -351.8594 382.3867 -351.8594 c380.0986 -351.8594 378.582 -350.3789 378.582 -348.1143 C378.582 -344.8613 lf1 D380.0791 -348.1143 m380.0791 -349.5342 380.9277 -350.3789 382.3867 -350.3789 c384.2988 -350.3789 384.7129 -349.1387 384.7129 -348.1143 c384.7129 -344.8613 L384.7129 -343.4229 383.8457 -342.5938 382.3867 -342.5938 c380.4932 -342.5938 380.0791 -343.8174 380.0791 -344.8613 C380.0791 -348.1143 lf*U*u0 D395.0176 -337.6064 m395.0176 -351.6631 L393.5 -351.6631 L393.5 -337.6064 L395.0176 -337.6064 lf*U*u403.5908 -351.6631 m403.5908 -344.8613 L403.5908 -343.834 403.375 -342.5938 401.4609 -342.5938 c400.082 -342.5938 398.9385 -343.5 398.9385 -344.8213 c398.9385 -351.6631 L397.459 -351.6631 L397.459 -341.3115 L398.9385 -341.3115 L398.9385 -342.2588 L399.4512 -341.5293 400.5547 -341.1357 401.4609 -341.1357 c403.8066 -341.1357 405.0693 -342.5342 405.0693 -344.8613 c405.0693 -351.6631 L403.5908 -351.6631 lf*U*u409.8906 -342.79 m409.8906 -351.6631 L408.4111 -351.6631 L408.4111 -342.79 L406.6172 -342.79 L406.6172 -341.3115 L408.4111 -341.3115 L408.4111 -340.5439 L408.4111 -338.75 409.2988 -337.6064 411.1914 -337.6064 c412.1182 -337.6064 L412.1182 -339.0664 L411.0137 -339.0664 L410.5205 -339.0664 409.8906 -339.3418 409.8906 -340.3066 c409.8906 -341.3115 L412.334 -341.3115 L412.334 -342.79 L409.8906 -342.79 lf*U*u417.6572 -351.8594 m415.3115 -351.8594 413.7734 -350.4189 413.7734 -348.1143 c413.7734 -344.8613 L413.7734 -342.5938 415.3506 -341.1357 417.6572 -341.1357 c419.9834 -341.1357 421.5215 -342.5537 421.5215 -344.8613 c421.5215 -348.1143 l421.5215 -350.3789 419.9434 -351.8594 417.6572 -351.8594 cf1 D420.0234 -344.8613 m420.0234 -343.8174 419.5488 -342.5938 417.6572 -342.5938 c416.1777 -342.5938 415.2715 -343.4229 415.2715 -344.8613 c415.2715 -348.1143 L415.2715 -349.1387 415.7461 -350.3789 417.6572 -350.3789 c419.1152 -350.3789 420.0234 -349.5342 420.0234 -348.1143 C420.0234 -344.8613 lf*U*u0 D427.1543 -342.79 m426.3652 -342.79 425.3213 -343.3828 425.3213 -345.0771 c425.3213 -351.6631 L423.8418 -351.6631 L423.8418 -341.3115 L425.3213 -341.3115 L425.3213 -342.2588 L425.8145 -341.6484 426.584 -341.3115 427.1748 -341.3115 c428.002 -341.3115 L428.002 -342.79 L427.1543 -342.79 lf*U*u441.5762 -351.6631 m440.0977 -351.6631 L440.0977 -344.2686 L440.0977 -343.3828 439.7031 -342.5938 438.5996 -342.5938 c437.0996 -342.5938 436.4512 -343.5195 436.4512 -345.0771 c436.4512 -351.6631 L434.9717 -351.6631 L434.9717 -344.3281 L434.9717 -343.4619 434.5371 -342.5938 433.5137 -342.5938 c431.9746 -342.5938 431.3447 -343.5 431.3447 -345.0967 c431.3447 -351.6631 L429.8457 -351.6631 L429.8457 -341.2734 L431.3447 -341.2734 L431.3447 -342.1016 L431.8965 -341.4297 432.8037 -341.1357 433.6309 -341.1357 c434.7148 -341.1357 435.4258 -341.666 435.8389 -342.416 c436.6465 -341.3711 437.7705 -341.1357 438.6973 -341.1357 c440.8076 -341.1357 441.5762 -342.79 441.5762 -344.1328 C441.5762 -351.6631 lf*U*u451.332 -351.6631 m449.834 -351.6631 L449.834 -350.6748 L449.3809 -351.3477 448.2559 -351.8379 447.0918 -351.8379 c445.3975 -351.8379 443.6426 -350.834 443.6426 -348.4688 c443.6426 -346.5361 445.0625 -345.5322 446.9551 -345.5322 c449.834 -345.5322 L449.834 -344.5439 L449.834 -343.0283 448.9258 -342.5938 447.7051 -342.5938 c446.5811 -342.5938 445.5742 -343.0869 445.5176 -344.5068 c444.0381 -344.5068 L444.1172 -342.041 446.127 -341.1357 447.6855 -341.1357 c449.459 -341.1357 451.332 -342.0029 451.332 -344.4873 C451.332 -351.6631 lf1 D449.834 -346.9316 m446.9951 -346.9316 L445.8711 -346.9316 445.1221 -347.3643 445.1221 -348.4688 c445.1221 -350.0059 446.2461 -350.3604 447.3301 -350.3604 c448.5713 -350.3604 449.834 -349.5537 449.834 -348.1338 C449.834 -346.9316 lf*U*u0 D452.9092 -341.3115 m454.8809 -341.3115 L454.8809 -337.6064 L456.3594 -337.6064 L456.3594 -341.3115 L458.627 -341.3115 L458.627 -342.79 L456.3594 -342.79 L456.3594 -349.0605 L456.3594 -349.9277 456.8711 -350.2031 457.4434 -350.2031 c458.666 -350.2031 L458.666 -351.6631 L457.3643 -351.6631 L455.9844 -351.6631 454.8809 -350.8936 454.8809 -348.9805 c454.8809 -342.79 L452.9092 -342.79 L452.9092 -341.3115 lf*U*u460.5684 -339.5977 m460.5684 -337.4678 L462.3809 -337.4678 L462.3809 -339.5977 L460.5684 -339.5977 lf460.7461 -351.6631 m460.7461 -341.2949 L462.2246 -341.2949 L462.2246 -351.6631 L460.7461 -351.6631 lf*U*u470.9355 -351.6631 m467.8008 -346.7324 L466.2832 -348.3896 L466.2832 -351.6631 L464.7832 -351.6631 L464.7832 -337.4678 L466.2832 -337.4678 L466.2832 -346.3008 L470.8164 -341.2949 L472.7686 -341.2949 L468.7666 -345.6484 L472.6904 -351.6631 L470.9355 -351.6631 lf*UUuu580.2285 -257.0957 m577.7813 -256.4385 575.2715 -257.8926 574.6152 -260.3389 c573.9609 -262.7861 575.4063 -265.2998 577.8535 -265.9531 c580.2998 -266.6094 582.8164 -265.1563 583.4707 -262.7109 c584.1289 -260.2646 582.6738 -257.751 580.2285 -257.0957 cf565.9297 -265.5 m565.9238 -265.5 l565.9102 -265.5 L549.4688 -265.5 L552.7539 -253.1338 L553.1299 -251.7441 552.3105 -250.3057 550.9199 -249.9238 C548.3848 -249.2451 L546.9902 -248.8691 545.5762 -249.6934 545.1982 -251.0869 C541.3633 -265.5 L528.4912 -265.5 L527.0645 -265.498 525.5527 -266.7207 525.1689 -268.1445 C524.4727 -270.7373 L524.0908 -272.1641 524.9307 -273.3281 526.3555 -273.333 C539.2676 -273.333 L535.9277 -285.7109 L535.5527 -287.0889 536.4277 -288.5469 537.8047 -288.9199 C540.3115 -289.5938 L541.6875 -289.9609 543.1016 -289.1504 543.4795 -287.7754 C547.3711 -273.333 L565.9277 -273.333 L568.459 -273.333 570.5137 -275.3867 570.5137 -277.918 c570.5137 -278.2256 570.4258 -278.7432 570.3867 -278.9629 C564.332 -301.4102 L563.9551 -302.7861 564.832 -304.2461 566.207 -304.6172 C568.7148 -305.29 L570.0898 -305.6602 571.5039 -304.8467 571.8809 -303.4736 C577.9258 -281.1768 L577.9209 -281.166 L578.1992 -280.1318 578.3525 -279.0439 578.3525 -277.9229 c578.3525 -271.0605 572.7891 -265.5 565.9297 -265.5 cfUuu*u368.3408 -281.1631 m368.3408 -271.4648 L361.4482 -271.4648 L361.4482 -281.1631 L358.5547 -281.1631 L358.5547 -259.8887 L361.4482 -259.8887 L361.4482 -268.5693 L368.3408 -268.5693 L368.3408 -259.8887 L371.2656 -259.8887 L371.2656 -281.1631 L368.3408 -281.1631 lf*U*u380.9355 -281.4609 m377.3535 -281.4609 374.998 -279.2236 374.998 -275.7021 c374.998 -270.9854 L374.998 -267.5264 377.4141 -265.2891 380.9355 -265.2891 c384.4863 -265.2891 386.873 -267.4678 386.873 -270.9854 c386.873 -275.7021 l386.873 -279.1641 384.4258 -281.4609 380.9355 -281.4609 cf1 D384.0059 -270.9854 m384.0059 -269.6758 383.3809 -268.0635 380.9355 -268.0635 c378.9941 -268.0635 377.8311 -269.1377 377.8311 -270.9854 c377.8311 -275.7021 L377.8311 -277.0449 378.459 -278.625 380.9355 -278.625 c382.8428 -278.625 384.0059 -277.5234 384.0059 -275.7021 C384.0059 -270.9854 lf*U*u0 D402.1836 -270.6875 m399.2891 -270.6875 L399.0508 -269.375 398.2754 -268.0635 396.3057 -268.0635 c394.3652 -268.0635 393.2012 -269.1377 393.2012 -270.9854 c393.2012 -275.7021 L393.2012 -277.0449 393.8281 -278.625 396.3057 -278.625 c397.916 -278.625 398.9902 -277.6729 399.2607 -276.0293 c402.1836 -276.0293 L401.7676 -279.4023 399.5293 -281.4609 396.3057 -281.4609 c392.7246 -281.4609 390.3682 -279.2236 390.3682 -275.7021 c390.3682 -270.9854 L390.3682 -267.5264 392.7852 -265.2891 396.3057 -265.2891 c399.5576 -265.2891 401.7969 -267.3164 402.1836 -270.6875 cf*U*u414.4102 -281.1631 m414.4102 -270.9854 L414.4102 -269.6758 414.1094 -268.0635 411.6641 -268.0635 c409.874 -268.0635 408.3809 -269.2266 408.3809 -270.9287 c408.3809 -281.1631 L405.5479 -281.1631 L405.5479 -259.8887 L408.3809 -259.8887 L408.3809 -266.3926 L409.2471 -265.6455 410.5596 -265.2891 411.6641 -265.2891 c415.334 -265.2891 417.2148 -267.4355 417.2148 -270.9854 c417.2148 -281.1631 L414.4102 -281.1631 lf*U*u426.3994 -281.4023 m423.0879 -281.4023 420.7012 -279.4023 420.5215 -276.0293 c423.3555 -276.0293 L423.5352 -277.7324 424.6689 -278.5684 426.3994 -278.5684 c427.8906 -278.5684 429.502 -278.208 429.502 -276.3896 c429.502 -275.6406 428.875 -275.1045 427.9805 -274.8389 c426.6973 -274.418 425.4746 -274.1816 424.2207 -273.8516 c422.251 -273.3457 420.7598 -272.0293 420.7598 -269.9736 c420.7598 -266.6016 423.3848 -265.3164 426.3105 -265.3164 c429.4707 -265.3164 431.7998 -267.1094 432.0986 -270.3311 c429.2031 -270.3311 L428.9648 -268.8994 428.0107 -268.0928 426.251 -268.0928 c424.9385 -268.0928 423.5664 -268.4521 423.5664 -269.9736 c423.5664 -270.5684 424.0723 -271.0781 424.9668 -271.3145 c426.1309 -271.6436 427.7129 -271.9707 428.9648 -272.3906 c430.7852 -272.9883 432.3066 -274.2715 432.3066 -276.3896 c432.3066 -280.0596 429.5615 -281.4023 426.3994 -281.4023 cf*U*u447.3398 -270.6875 m444.4453 -270.6875 L444.209 -269.375 443.4316 -268.0635 441.4629 -268.0635 c439.5225 -268.0635 438.3594 -269.1377 438.3594 -270.9854 c438.3594 -275.7021 L438.3594 -277.0449 438.9863 -278.625 441.4629 -278.625 c443.0742 -278.625 444.1475 -277.6729 444.416 -276.0293 c447.3398 -276.0293 L446.9219 -279.4023 444.6855 -281.4609 441.4629 -281.4609 c437.8828 -281.4609 435.5254 -279.2236 435.5254 -275.7021 c435.5254 -270.9854 L435.5254 -267.5264 437.9414 -265.2891 441.4629 -265.2891 c444.7148 -265.2891 446.9521 -267.3164 447.3398 -270.6875 cf*U*u459.5664 -281.1631 m459.5664 -270.9854 L459.5664 -269.6758 459.2676 -268.0635 456.8213 -268.0635 c455.0313 -268.0635 453.5381 -269.2266 453.5381 -270.9287 c453.5381 -281.1631 L450.7051 -281.1631 L450.7051 -259.8887 L453.5381 -259.8887 L453.5381 -266.3926 L454.4043 -265.6455 455.7168 -265.2891 456.8213 -265.2891 c460.4902 -265.2891 462.3711 -267.4355 462.3711 -270.9854 c462.3711 -281.1631 L459.5664 -281.1631 lf*U*u475.1104 -281.1631 m475.1104 -280.1455 L474.543 -280.7754 473.291 -281.4316 472.0674 -281.4316 c468.4863 -281.4316 466.2168 -279.1934 466.2168 -275.7021 c466.2168 -265.498 L469.0527 -265.498 L469.0527 -275.7021 L469.0527 -277.0449 469.5898 -278.5977 472.0674 -278.5977 c473.8555 -278.5977 475.1104 -277.5508 475.1104 -275.8516 c475.1104 -265.498 L477.9756 -265.498 L477.9756 -281.1631 L475.1104 -281.1631 lf*U*u481.9883 -259.8887 m484.8223 -259.8887 L484.8223 -277.0742 L484.8223 -278.0596 485.3906 -278.3574 486.0479 -278.3574 c487.0908 -278.3574 L487.0908 -281.1631 L485.8975 -281.1631 L483.75 -281.1631 481.9883 -279.9707 481.9883 -276.958 C481.9883 -259.8887 lf*U*u501.5313 -274.3604 m492.4912 -274.3604 L492.4912 -275.7021 L492.4912 -277.0449 493.1172 -278.625 495.5938 -278.625 c497.207 -278.625 498.2793 -277.6729 498.5488 -276.0293 c501.4707 -276.0293 L501.0547 -279.4023 498.8164 -281.4609 495.5938 -281.4609 c492.0137 -281.4609 489.6563 -279.2236 489.6563 -275.7021 c489.6563 -270.9854 L489.6563 -267.5264 492.0723 -265.2891 495.5938 -265.2891 c499.1445 -265.2891 501.5313 -267.4678 501.5313 -270.9854 C501.5313 -274.3604 lf1 D498.668 -270.9854 m498.668 -269.6758 498.041 -268.0635 495.5938 -268.0635 c493.6543 -268.0635 492.4912 -269.1377 492.4912 -270.9854 c492.4912 -271.5537 L498.668 -271.5537 L498.668 -270.9854 lf*U*u0 D361.4785 -283.4082 m361.4785 -304.6816 L358.5547 -304.6816 L358.5547 -283.4082 L361.4785 -283.4082 lf*U*u374.3252 -304.6816 m374.3252 -294.5068 L374.3252 -293.1943 374.0273 -291.5811 371.5811 -291.5811 c369.791 -291.5811 368.2988 -292.748 368.2988 -294.4473 c368.2988 -304.6816 L365.4639 -304.6816 L365.4639 -289.0449 L368.2988 -289.0449 L368.2988 -289.9121 L369.1934 -289.1973 370.5068 -288.8076 371.5811 -288.8076 c375.2207 -288.8076 377.1299 -290.957 377.1299 -294.5068 c377.1299 -304.6816 L374.3252 -304.6816 lf*U*u389.6318 -303.7266 m389.0938 -304.3545 387.9004 -304.9795 386.6777 -304.9795 c383.0957 -304.9795 380.8281 -302.7441 380.8281 -299.2217 c380.8281 -294.5068 L380.8281 -291.0459 383.1563 -288.8076 386.6777 -288.8076 c387.8691 -288.8076 389.123 -289.4063 389.6318 -290.002 c389.6318 -289.0156 L392.4961 -289.0156 L392.4961 -305.8457 L392.4961 -310.2031 389.6318 -311.4258 386.6777 -311.4258 c383.9619 -311.4258 381.7539 -309.8438 381.1865 -307.1279 c384.1406 -307.1279 L384.5879 -308.1133 385.4844 -308.7686 386.6777 -308.7686 c388.0488 -308.7686 389.6318 -308.3516 389.6318 -305.8457 C389.6318 -303.7266 lf1 D389.6318 -294.5068 m389.6318 -293.1943 389.123 -291.5811 386.6777 -291.5811 c384.7988 -291.5811 383.6641 -292.6553 383.6641 -294.5068 c383.6641 -299.2217 L383.6641 -300.5635 384.2002 -302.1465 386.6777 -302.1465 c388.5273 -302.1465 389.6318 -301.042 389.6318 -299.2217 C389.6318 -294.5068 lf*U*u0 D402.2207 -304.9795 m398.6406 -304.9795 396.2832 -302.7441 396.2832 -299.2217 c396.2832 -294.5068 L396.2832 -291.0459 398.6992 -288.8076 402.2207 -288.8076 c405.7715 -288.8076 408.1582 -290.9883 408.1582 -294.5068 c408.1582 -299.2217 l408.1582 -302.6816 405.7109 -304.9795 402.2207 -304.9795 cf1 D405.293 -294.5068 m405.293 -293.1943 404.668 -291.5811 402.2207 -291.5811 c400.2803 -291.5811 399.1172 -292.6553 399.1172 -294.5068 c399.1172 -299.2217 L399.1172 -300.5635 399.7441 -302.1465 402.2207 -302.1465 c404.1309 -302.1465 405.293 -301.042 405.293 -299.2217 C405.293 -294.5068 lf*U*u0 D411.8926 -283.4082 m414.7266 -283.4082 L414.7266 -300.5938 L414.7266 -301.5811 415.2939 -301.8779 415.9512 -301.8779 c416.9941 -301.8779 L416.9941 -304.6816 L415.8008 -304.6816 L413.6523 -304.6816 411.8926 -303.4883 411.8926 -300.4736 C411.8926 -283.4082 lf*U*u425.1621 -304.9229 m421.8496 -304.9229 419.4629 -302.9209 419.2832 -299.5488 c422.1172 -299.5488 L422.2949 -301.25 423.4297 -302.0869 425.1621 -302.0869 c426.6523 -302.0869 428.2637 -301.7305 428.2637 -299.9082 c428.2637 -299.1611 427.6367 -298.625 426.7422 -298.3574 c425.459 -297.9375 424.2363 -297.7002 422.9824 -297.3701 c421.0127 -296.8643 419.5215 -295.5508 419.5215 -293.4922 c419.5215 -290.1211 422.1465 -288.8369 425.0723 -288.8369 c428.2344 -288.8369 430.5615 -290.6289 430.8613 -293.8516 c427.9648 -293.8516 L427.7266 -292.418 426.7715 -291.6143 425.0127 -291.6143 c423.6992 -291.6143 422.3252 -291.9717 422.3252 -293.4922 c422.3252 -294.0898 422.834 -294.5957 423.7285 -294.834 c424.8906 -295.1641 426.4746 -295.4922 427.7266 -295.9111 c429.5469 -296.5049 431.0693 -297.7891 431.0693 -299.9082 c431.0693 -303.5781 428.3223 -304.9229 425.1621 -304.9229 cf*U*u433.2813 -289.0449 m436.1152 -289.0449 L436.1152 -283.4082 L438.9502 -283.4082 L438.9502 -289.0449 L442.2031 -289.0449 L442.2031 -291.8809 L438.9502 -291.8809 L438.9502 -300.5938 L438.9502 -301.5811 439.5176 -301.8779 440.1748 -301.8779 c442.2617 -301.8779 L442.2617 -304.6816 L440.0527 -304.6816 L437.8457 -304.6816 436.1152 -303.4883 436.1152 -300.4736 c436.1152 -291.8809 L433.2813 -291.8809 L433.2813 -289.0449 lf*U*u456.8506 -304.6816 m453.9844 -304.6816 L453.9844 -303.4883 L453.3008 -304.4141 451.8066 -304.9492 450.375 -304.9492 c447.8691 -304.9492 445.0645 -303.3691 445.0645 -299.7285 c445.0645 -296.7148 447.3906 -295.1328 450.3457 -295.1328 c453.9844 -295.1328 L453.9844 -294.0576 L453.9844 -292.1201 452.8818 -291.5811 451.3301 -291.5811 c449.9883 -291.5811 448.7051 -292.1797 448.4648 -293.8516 c445.6309 -293.8516 L445.959 -290.1504 449.002 -288.8076 451.3008 -288.8076 c454.0156 -288.8076 456.8506 -290.1211 456.8506 -293.9717 C456.8506 -304.6816 lf1 D453.9844 -297.8486 m450.375 -297.8486 L448.9727 -297.8486 447.8691 -298.3857 447.8691 -299.7285 c447.8691 -301.668 449.3301 -302.2656 450.7334 -302.2656 c452.3447 -302.2656 453.9844 -301.0723 453.9844 -299.251 C453.9844 -297.8486 lf*U*u0 D460.5469 -294.5068 m460.5469 -290.9883 462.8457 -288.8076 466.3965 -288.8076 c467.6504 -288.8076 468.9033 -289.4355 469.4102 -290.0898 c469.4102 -283.4082 L472.2734 -283.4082 L472.2734 -304.6816 L469.4102 -304.6816 L469.4102 -303.7266 L468.9326 -304.3252 467.5889 -304.9795 466.3965 -304.9795 c462.9043 -304.9795 460.5469 -302.6816 460.5469 -299.2217 C460.5469 -294.5068 lf1 D463.4121 -299.2217 m463.4121 -301.042 464.5156 -302.1465 466.3965 -302.1465 c468.873 -302.1465 469.4102 -300.5635 469.4102 -299.2217 c469.4102 -294.5068 L469.4102 -292.6553 468.2764 -291.5811 466.3965 -291.5811 c463.9492 -291.5811 463.4121 -293.1943 463.4121 -294.5068 C463.4121 -299.2217 lf*U*u0 D475.1992 -289.0449 m478.0332 -289.0449 L478.0332 -283.4082 L480.8691 -283.4082 L480.8691 -289.0449 L484.1211 -289.0449 L484.1211 -291.8809 L480.8691 -291.8809 L480.8691 -300.5938 L480.8691 -301.5811 481.4365 -301.8779 482.0918 -301.8779 c484.1797 -301.8779 L484.1797 -304.6816 L481.9727 -304.6816 L479.7656 -304.6816 478.0332 -303.4883 478.0332 -300.4736 c478.0332 -291.8809 L475.1992 -291.8809 L475.1992 -289.0449 lf*UUu*u223.9063 -261.5801 m223.9063 -281.1787 L222.2695 -281.1787 L222.2695 -261.5801 L216.9082 -261.5801 L216.9082 -259.9404 L229.2705 -259.9404 L229.2705 -261.5801 L223.9063 -261.5801 lf*U*u240.4395 -273.7324 m230.5508 -273.7324 L230.5508 -275.9082 L230.5508 -277.6943 231.3535 -279.8701 234.6914 -279.8701 c237.0742 -279.8701 238.624 -278.5879 238.7734 -276.3516 c240.4102 -276.3516 L240.2314 -279.4814 237.9688 -281.4775 234.6914 -281.4775 c231.1758 -281.4775 228.9131 -279.3613 228.9131 -275.9082 c228.9131 -270.7539 L228.9131 -267.3877 231.2354 -265.2109 234.6914 -265.2109 c238.1777 -265.2109 240.4395 -267.3281 240.4395 -270.7539 C240.4395 -273.7324 lf1 D238.8008 -270.7539 m238.8008 -268.9688 237.998 -266.8223 234.6914 -266.8223 c232.1289 -266.8223 230.5508 -268.252 230.5508 -270.7539 c230.5508 -272.124 L238.8008 -272.124 L238.8008 -270.7539 lf*U*u0 D255.4873 -270.4268 m253.8779 -270.4268 L253.7891 -268.7275 252.8945 -266.8223 249.7676 -266.8223 c247.207 -266.8223 245.627 -268.252 245.627 -270.7539 c245.627 -275.9082 L245.627 -277.6943 246.4316 -279.8701 249.7676 -279.8701 c252.1504 -279.8701 253.6992 -278.5879 253.8477 -276.3516 c255.4873 -276.3516 L255.3066 -279.4814 253.0439 -281.4775 249.7676 -281.4775 c246.252 -281.4775 243.9883 -279.3613 243.9883 -275.9082 c243.9883 -270.7539 L243.9883 -267.3877 246.3125 -265.2109 249.7676 -265.2109 c253.1338 -265.2109 255.3398 -267.1797 255.4873 -270.4268 cf*U*u268.6875 -281.1787 m268.6875 -270.7539 L268.6875 -268.9961 268.2988 -266.8223 264.9639 -266.8223 c262.5508 -266.8223 260.6143 -268.4004 260.6143 -270.6924 c260.6143 -281.1787 L258.9766 -281.1787 L258.9766 -259.9697 L260.6143 -259.9697 L260.6143 -267.3574 L261.5977 -265.8076 263.3838 -265.2109 264.9639 -265.2109 c268.4492 -265.2109 270.3262 -267.2988 270.3262 -270.7539 c270.3262 -281.1787 L268.6875 -281.1787 lf*U*u284.123 -281.1787 m284.123 -270.7539 L284.123 -268.9961 283.7354 -266.8223 280.3984 -266.8223 c277.9873 -266.8223 276.0498 -268.4004 276.0498 -270.6924 c276.0498 -281.1787 L274.4121 -281.1787 L274.4121 -265.5098 L276.0498 -265.5098 L276.0498 -267.3574 L277.123 -265.75 278.791 -265.2109 280.3984 -265.2109 c283.8848 -265.2109 285.7607 -267.2988 285.7607 -270.7539 c285.7607 -281.1787 L284.123 -281.1787 lf*U*u289.6563 -262.3535 m289.6563 -259.7041 L291.8008 -259.7041 L291.8008 -262.3535 L289.6563 -262.3535 lf289.9531 -281.1787 m289.9531 -265.4805 L291.5918 -265.4805 L291.5918 -281.1787 L289.9531 -281.1787 lf*U*u300.8418 -281.416 m297.5352 -281.416 295.1523 -279.6025 295.1523 -276.5342 c296.7891 -276.5342 L296.7891 -278.6768 298.3984 -279.8086 300.8418 -279.8086 c302.8652 -279.8086 304.9805 -279.2725 304.9805 -276.6533 c304.9805 -275.3721 304.0898 -274.7471 302.8652 -274.3867 c301.5557 -274 299.8877 -273.6758 298.7256 -273.4043 c296.8809 -272.9902 295.3906 -271.5889 295.3906 -269.6523 c295.3906 -266.5244 297.9219 -265.2451 300.752 -265.2451 c304.0596 -265.2451 306.3809 -266.9688 306.4111 -270.0703 c304.7734 -270.0703 L304.7441 -268.043 303.4023 -266.8516 300.6924 -266.8516 c298.9063 -266.8516 297.0273 -267.3877 297.0273 -269.6523 c297.0273 -270.6924 297.8926 -271.5576 299.1445 -271.8564 c300.1855 -272.0947 302.0625 -272.4531 303.4023 -272.8389 c305.25 -273.377 306.6191 -274.6543 306.6191 -276.6533 c306.6191 -280.1387 303.9404 -281.416 300.8418 -281.416 cf*U*u321.4619 -270.4268 m319.8516 -270.4268 L319.7617 -268.7275 318.8691 -266.8223 315.7422 -266.8223 c313.1797 -266.8223 311.6016 -268.252 311.6016 -270.7539 c311.6016 -275.9082 L311.6016 -277.6943 312.4063 -279.8701 315.7422 -279.8701 c318.125 -279.8701 319.6729 -278.5879 319.8223 -276.3516 c321.4619 -276.3516 L321.2822 -279.4814 319.0176 -281.4775 315.7422 -281.4775 c312.2266 -281.4775 309.9629 -279.3613 309.9629 -275.9082 c309.9629 -270.7539 L309.9629 -267.3877 312.2852 -265.2109 315.7422 -265.2109 c319.1074 -265.2109 321.3115 -267.1797 321.4619 -270.4268 cf*U*u334.6592 -281.1787 m334.6592 -270.7539 L334.6592 -268.9961 334.2715 -266.8223 330.9375 -266.8223 c328.5234 -266.8223 326.5879 -268.4004 326.5879 -270.6924 c326.5879 -281.1787 L324.9473 -281.1787 L324.9473 -259.9697 L326.5879 -259.9697 L326.5879 -267.3574 L327.5703 -265.8076 329.3574 -265.2109 330.9375 -265.2109 c334.4199 -265.2109 336.2979 -267.2988 336.2979 -270.7539 c336.2979 -281.1787 L334.6592 -281.1787 lf*U*u351.6104 -273.7324 m341.7207 -273.7324 L341.7207 -275.9082 L341.7207 -277.6943 342.5244 -279.8701 345.8613 -279.8701 c348.2441 -279.8701 349.793 -278.5879 349.9414 -276.3516 c351.5801 -276.3516 L351.4023 -279.4814 349.1377 -281.4775 345.8613 -281.4775 c342.3457 -281.4775 340.083 -279.3613 340.083 -275.9082 c340.083 -270.7539 L340.083 -267.3877 342.4063 -265.2109 345.8613 -265.2109 c349.3457 -265.2109 351.6104 -267.3281 351.6104 -270.7539 C351.6104 -273.7324 lf1 D349.9707 -270.7539 m349.9707 -268.9688 349.168 -266.8223 345.8613 -266.8223 c343.2988 -266.8223 341.7207 -268.252 341.7207 -270.7539 c341.7207 -272.124 L349.9707 -272.124 L349.9707 -270.7539 lf*UUUUULB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_Illustrator_AI5 /terminate get exec
Adobe_shading_AI8 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_pattern_AI5 /terminate get exec
AGM_Gradient /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF